(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{202:function(n,e,i){"use strict";var t=i(3),r=i(31)(5),l=!0;"find"in[]&&Array(1).find(function(){l=!1}),t(t.P+t.F*l,"Array",{find:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}}),i(104)("find")},225:function(n,e,i){"use strict";i(60),i(29),i(14),i(30),i(202),i(26);e.a={group:"Search",features:[{title:[["Search","path"]],script:function(n){var e=n.Shape,i=n.HexagonalGrid,t=n.HexagonalTile,r=n.Search,l=new i(70,!0,e.Rhombus,4,4),s=new r(new t,1/0,8,void 0,l.tiles).path(l.tile(3,3));return{grid:l,showTiles:!0,path:s,showCoordinates:!0}}},{title:[["Obstacles","path"]],script:function(n){var e=n.Shape,i=n.HexagonalGrid,t=n.HexagonalTile,r=n.Search,l=new i(70,!0,e.Rhombus,4,4),s=[l.tile(1,0),l.tile(2,1),l.tile(1,3),l.tile(2,2)],a=new r(new t,1/0,8,s,l.tiles).path(l.tile(3,3));return{grid:l,showTiles:!0,path:a,showCoordinates:!0,highlight:s}}},{title:[["Obstacles","path"]],script:function(n){var e=n.Shape,i=n.RectangularGrid,t=n.RectangularTile,r=n.Search,l=new i(40,!0,e.Rhombus,5,5),s=[l.tile(1,0),l.tile(2,1),l.tile(1,3),l.tile(2,2)],a=new r(new t,1/0,8,s,l.tiles).path(l.tile(4,0));return{grid:l,showTiles:!0,path:a,showCoordinates:!0,highlight:s}}},{title:[["Maze","demo"]],class:"wide",width:944,script:function(n){var e=n.Shape,i=n.HexagonalGrid,t=n.HexagonalTile,r=n.Search,l=n.circle,s=new i(32,!0,e.Hexagonal,14),a=new t,h=[],o=[].concat(((h=l(a,1)).splice(5,1),h)).concat(((h=l(a,3)).splice(2,1),h)).concat(((h=l(a,5)).splice(18,1),h)).concat(((h=l(a,7)).splice(33,1),h)).concat(((h=l(a,9)).splice(7,1),h)).concat(((h=l(a,11)).splice(22,1),h)),c=new r(a,1/0,100,o,s.tiles).path(s.tile(-12,0));return{grid:s,highlight:o,showTiles:!0,path:c,width:912}}},{title:[["Search maze","demo"]],script:function(n){for(var e=n.Shape,i=n.RectangularGrid,t=n.RectangularTile,r=n.Search,l=new i(14,!1,e.Rhombus,24,24),s=[],a=0;a<288;a++)s.push(new t(Math.floor(24*Math.random()+1),Math.floor(23*Math.random())));var h=new r(new t,1/0,100,s,l.tiles),o=Math.max.apply(null,l.tiles.map(function(n){return h.cost[n.key]||-1})),c=l.tiles.find(function(n){return h.cost[n.key]===o}),g=h.path(c);return{grid:l,highlight:s,showTiles:!0,search:h,path:g,highlightDark:!0}}},{title:[["Connect path","demo"]],script:function(n){var e=n.Shape,i=n.RectangularGrid,t=n.RectangularTile,r=n.Search,l=n.Position,s=new i(28,!1,e.Rhombus,7,7),a=[];a.push(new l(0,0)),a.push(new l(6,6)),s.tiles.forEach(function(n,e){n.x&n.y%3||a.push(n)});var h=new r(new t,1/0,100,void 0,a),o=h.path(s.tile(6,6));return{grid:s,highlight:a,showTiles:!0,search:h,path:o}}},{title:[["Connect edges","demo"]],script:function(n){for(var e=n.Shape,i=n.HexagonalGrid,t=n.Search,r=new i(24,!0,e.Rhombus,11,11),l=[],s=[],a=0;a<11;a++)l.push(r.tile(0,a)),s.push(r.tile(10,a));var h=r.tiles.filter(function(n,e){return!((n.x-n.y)%3&&(e+n.x)%7)}),o=new t(l,1/0,100,h,r.tiles),c=o.path(s);return{grid:r,highlight:h,highlightDark:!0,showTiles:!0,search:o,values:o.cost,path:c}}},{title:[["Connections","demo"]],script:function(n){var e=n.Shape,i=n.HexagonalGrid,t=n.connections,r=new i(24,!0,e.Rhombus,11,11),l=r.tiles.filter(function(n,e){return(n.x-n.y)%3||!((e+n.x)%8)});return{grid:r,lines:t(l).filter(function(n){return 5===n.length}),highlight:l,showTiles:!0}}},{title:[["Connections","demo"]],script:function(n){var e=n.Shape,i=n.RectangularGrid,t=n.Rectangular8Tile,r=n.connections,l=new i(24,!1,e.Rhombus,11,11,t),s=l.tiles.filter(function(n,e){return(n.x-n.y)%3||!((e+n.x)%8)});return{grid:l,lines:r(s).filter(function(n){return 5===n.length}),highlight:s,showTiles:!0}}},{title:[["Connections","demo"]],script:function(n){var e=n.Shape,i=n.TriangularGrid,t=n.connections,r=new i(24,!1,e.Triangular,11,11),l=r.tiles.filter(function(n,e){return-1===[13,50,98].indexOf(e)});return{grid:r,lines:t(l).filter(function(n){return n.length<=7&&n.length>=3}),highlight:l,showTiles:!0}}},{title:[["Border","demo"]],script:function(n){var e=n.Shape,i=n.TriangularGrid,t=n.border,r=new i(24,!1,e.Triangular,11,11);return{grid:r,highlight:t(r.tiles),showTiles:!0}}},{title:[["Outline","demo"]],script:function(n){var e=n.Shape,i=n.HexagonalGrid,t=n.outline,r=new i(48,!1,e.Hexagonal,3,3),l=t(r.tiles);return r.tiles=r.tiles.concat(l),{grid:r,highlight:l,showTiles:!0}}},{title:[["Outline","demo"]],script:function(n){var e=n.Shape,i=n.TriangularGrid,t=n.outline,r=new i(48,!1,e.Triangular,3,3),l=t(r.tiles);return r.tiles=r.tiles.concat(l),{grid:r,highlight:l,showTiles:!0}}}]}},257:function(n){n.exports=["const { Shape, HexagonalGrid, HexagonalTile, Search } = Gridy\n\nconst grid = new HexagonalGrid(70, true, Shape.Rhombus, 4, 4)\n\nconst search = new Search(\n  new HexagonalTile(),\n  Infinity,\n  8,\n  undefined,\n  grid.tiles\n)\n\nconst path = search.path(grid.tile(3, 3))\n\nreturn { grid, showTiles: true, path, showCoordinates: true }","const { Shape, HexagonalGrid, HexagonalTile, Search } = Gridy\n\nconst grid = new HexagonalGrid(70, true, Shape.Rhombus, 4, 4)\n\nconst blocked = [\n  grid.tile(1, 0),\n  grid.tile(2, 1),\n  grid.tile(1, 3),\n  grid.tile(2, 2)\n]\n\nconst search = new Search(\n  new HexagonalTile(),\n  Infinity,\n  8,\n  blocked,\n  grid.tiles\n)\n\nconst path = search.path(grid.tile(3, 3))\n\nreturn { grid, showTiles: true, path, showCoordinates: true, highlight: blocked }","const { Shape, RectangularGrid, RectangularTile, Search } = Gridy\n\nconst grid = new RectangularGrid(40, true, Shape.Rhombus, 5, 5)\n\nconst blocked = [\n  grid.tile(1, 0),\n  grid.tile(2, 1),\n  grid.tile(1, 3),\n  grid.tile(2, 2)\n]\n\nconst search = new Search(\n  new RectangularTile(),\n  Infinity,\n  8,\n  blocked,\n  grid.tiles\n)\n\nconst path = search.path(grid.tile(4, 0))\n\nreturn { grid, showTiles: true, path, showCoordinates: true, highlight: blocked }","const { Shape, HexagonalGrid, HexagonalTile, Search, circle } = Gridy\n\nconst grid = new HexagonalGrid(32, true, Shape.Hexagonal, 14)\n\nconst center = new HexagonalTile()\nlet t = []\nconst highlight = []\n  .concat(((t = circle(center, 1)).splice(5, 1), t))\n  .concat(((t = circle(center, 3)).splice(2, 1), t))\n  .concat(((t = circle(center, 5)).splice(18, 1), t))\n  .concat(((t = circle(center, 7)).splice(33, 1), t))\n  .concat(((t = circle(center, 9)).splice(7, 1), t))\n  .concat(((t = circle(center, 11)).splice(22, 1), t))\n\nconst search = new Search(\n  center,\n  Infinity,\n  100,\n  highlight,\n  grid.tiles\n)\n\nconst path = search.path(grid.tile(-12, 0))\n\nreturn { grid, highlight, showTiles: true, path, width: 456 * 2 }","    const { Shape, RectangularGrid, RectangularTile, Search } = Gridy\n\n    const size = 24\n\n    const grid = new RectangularGrid(14, false, Shape.Rhombus, size, size)\n\n    const blocked = []\n\n    for (let i = 0; i < size * size / 2; i++) {\n      blocked.push(new RectangularTile(\n        Math.floor(Math.random() * size + 1),\n        Math.floor(Math.random() * (size - 1))\n      ))","const { Shape, RectangularGrid, RectangularTile, Search, Position } = Gridy\n\nconst size = 7\n\nconst grid = new RectangularGrid(28, false, Shape.Rhombus, size, size)\n\nconst highlight = []\n\nhighlight.push(new Position(0, 0))\nhighlight.push(new Position(size - 1, size - 1))\n\ngrid.tiles.forEach((t, i) => {\n  if (!(t.x & t.y % 3)) {\n    highlight.push(t)","const { Shape, HexagonalGrid, Search } = Gridy\n\nconst size = 11\n\nconst grid = new HexagonalGrid(24, true, Shape.Rhombus, size, size)\n\nconst starts = []\nconst ends = []\n\nfor (let i = 0; i < size; i++) {\n  starts.push(grid.tile(0, i))\n  ends.push(grid.tile(size - 1, i))","const { Shape, HexagonalGrid, connections } = Gridy\n\nconst size = 11\n\nconst grid = new HexagonalGrid(24, true, Shape.Rhombus, size, size)\n\nconst highlight = grid.tiles.filter((s, i) => ((s.x - s.y) % 3) || !((i + s.x) % 8))\n\nconst lines = connections(highlight).filter((l) => l.length === 5)\n\nreturn { grid, lines, highlight, showTiles: true }","const { Shape, RectangularGrid, Rectangular8Tile, connections } = Gridy\n\nconst size = 11\n\nconst grid = new RectangularGrid(24, false, Shape.Rhombus, size, size, Rectangular8Tile)\n\nconst highlight = grid.tiles.filter((s, i) => ((s.x - s.y) % 3) || !((i + s.x) % 8))\n\nconst lines = connections(highlight).filter((l) => l.length === 5)\n\nreturn { grid, lines, highlight, showTiles: true }","const { Shape, TriangularGrid, connections } = Gridy\n\nconst size = 11\n\nconst grid = new TriangularGrid(24, false, Shape.Triangular, size, size)\n\nconst highlight = grid.tiles.filter((s, i) => [13, 50, 98].indexOf(i) === -1)\n\nconst lines = connections(highlight).filter((l) => l.length <= 7 && l.length >= 3)\n\nreturn { grid, lines, highlight, showTiles: true }","const { Shape, TriangularGrid, border } = Gridy\n\nconst size = 11\n\nconst grid = new TriangularGrid(24, false, Shape.Triangular, size, size)\n\nconst highlight = border(grid.tiles)\n\nreturn { grid, highlight, showTiles: true }","const { Shape, HexagonalGrid, outline } = Gridy\n\nconst size = 3\n\nconst grid = new HexagonalGrid(48, false, Shape.Hexagonal, size, size)\n\nconst highlight = outline(grid.tiles)\ngrid.tiles = grid.tiles.concat(highlight)\n\nreturn { grid, highlight, showTiles: true }","const { Shape, TriangularGrid, outline } = Gridy\n\nconst size = 3\n\nconst grid = new TriangularGrid(48, false, Shape.Triangular, size, size)\n\nconst highlight = outline(grid.tiles)\ngrid.tiles = grid.tiles.concat(highlight)\n\nreturn { grid, highlight, showTiles: true }"]},268:function(n,e,i){"use strict";i.r(e);var t=i(225),r=i(257),l={data:function(){return{group:t.a,code:r}}},s=i(1),a=Object(s.a)(l,function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"content"},[e("Demo",{attrs:{group:this.group,code:this.code}})],1)},[],!1,null,null,null);e.default=a.exports}}]);