{"version":3,"file":"gridy.js","sources":["es6/Shape.js","es6/Constants.js","es6/Integer2.js","es6/Float2.js","es6/Rectangle.js","es6/bounds.js","es6/Axes.js","es6/Integer3.js","es6/HexagonalTile.js","es6/Position.js","es6/TileType.js","es6/HexagonalGrid.js","es6/BrickGrid.js","es6/TriangularTile.js","es6/TriangularGrid.js","es6/Float3.js","es6/RadialTile.js","es6/RadialGrid.js","es6/RectangularTile.js","es6/RectangularGrid.js","es6/Radial8Tile.js","es6/Rectangular8Tile.js","es6/Utils.js","es6/Search.js","es6/Transform.js","es6/Path.js","es6/index.js"],"sourcesContent":["export var Shape;\r\n(function (Shape) {\r\n    Shape[Shape[\"Even\"] = 0] = \"Even\";\r\n    Shape[Shape[\"Odd\"] = 1] = \"Odd\";\r\n    Shape[Shape[\"Hexagonal\"] = 2] = \"Hexagonal\";\r\n    Shape[Shape[\"Triangular\"] = 3] = \"Triangular\";\r\n    Shape[Shape[\"Rhombus\"] = 4] = \"Rhombus\";\r\n})(Shape || (Shape = {}));\r\n//# sourceMappingURL=Shape.js.map","export const SQRT_3 = Math.sqrt(3);\r\nexport const SQRT_3_2 = Math.sqrt(3) / 2;\r\nexport const SQRT_3_3 = Math.sqrt(3) / 3;\r\nexport const SQRT_3_6 = Math.sqrt(3) / 6;\r\nexport const SQRT_2 = Math.sqrt(2);\r\nexport const SQRT_2_2 = Math.sqrt(2) / 2;\r\nexport const SQRT_2_4 = Math.sqrt(2) / 4;\r\nexport const DEG_TO_RAD = Math.PI / 180;\r\nexport const ANG = 360;\r\nexport const ANG_2 = 180;\r\nexport const ANG_4 = 90;\r\n//# sourceMappingURL=Constants.js.map","export class Integer2 {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    get value() {\r\n        return [this.x, this.y];\r\n    }\r\n    distance(b) {\r\n        return Math.floor((Math.abs(this.x - b.x) + Math.abs(this.y - b.y)) / 2);\r\n    }\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n    equals(p) {\r\n        return (this.x === p.x) && (this.y === p.y);\r\n    }\r\n    add(p) {\r\n        return new Integer2(this.x + p.x, this.y + p.y);\r\n    }\r\n    scale(d) {\r\n        return new Integer2(this.x * d, this.y * d);\r\n    }\r\n    cubeLength() {\r\n        return Math.floor((Math.abs(this.x) + Math.abs(this.y)) / 2);\r\n    }\r\n}\r\n//# sourceMappingURL=Integer2.js.map","import { Integer2 } from './Integer2';\r\nexport class Float2 {\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    static ROUND(h) {\r\n        const rx = Math.round(h.x);\r\n        const ry = Math.round(h.y);\r\n        return new Integer2(rx, ry);\r\n    }\r\n    static LERP(a, b, t) {\r\n        return new Float2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t);\r\n    }\r\n    static LINE(a, b) {\r\n        const N = a.distance(b);\r\n        const results = [];\r\n        for (let i = 0; i < (N + 1); i++) {\r\n            results.push(Float2.ROUND(Float2.LERP(a, b, 1 / Math.max(1, N) * i)));\r\n        }\r\n        return results;\r\n    }\r\n    equals(p) {\r\n        return (this.x === p.x) && (this.y === p.y);\r\n    }\r\n    get value() {\r\n        return [this.x, this.y];\r\n    }\r\n    scale(k) {\r\n        return new Float2(this.x * k, this.y * k);\r\n    }\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n}\r\n//# sourceMappingURL=Float2.js.map","import { Float2 } from './Float2';\r\nexport class Rectangle {\r\n    constructor(minX = 0, maxX = 0, minY = 0, maxY = 0) {\r\n        this.minX = 0;\r\n        this.maxX = 0;\r\n        this.minY = 0;\r\n        this.maxY = 0;\r\n        this.minX = minX;\r\n        this.maxX = maxX;\r\n        this.minY = minY;\r\n        this.maxY = maxY;\r\n    }\r\n    static ADD(a, b) {\r\n        return new Rectangle(a.minX + b.minX, a.maxX + b.maxX, a.minY + b.minY, a.maxY + b.maxY);\r\n    }\r\n    static POINTS(a) {\r\n        return [\r\n            new Float2(a.minX, a.minY),\r\n            new Float2(a.maxX, a.minY),\r\n            new Float2(a.minX, a.maxY),\r\n            new Float2(a.maxX, a.maxY)\r\n        ];\r\n    }\r\n}\r\n//# sourceMappingURL=Rectangle.js.map","import { Rectangle } from './Rectangle';\r\n// From http://www.redblobgames.com/grids/hexagons/\r\n// Copyright 2012 Red Blob Games <redblobgames@gmail.com>\r\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\r\n// Original source: http://www.redblobgames.com/grids/hexagons/Grid.hx\r\nfunction boundsOfPoints(points) {\r\n    const rectangle = new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);\r\n    for (const p of points) {\r\n        if (p.x < rectangle.minX) {\r\n            rectangle.minX = p.x;\r\n        }\r\n        if (p.x > rectangle.maxX) {\r\n            rectangle.maxX = p.x;\r\n        }\r\n        if (p.y < rectangle.minY) {\r\n            rectangle.minY = p.y;\r\n        }\r\n        if (p.y > rectangle.maxY) {\r\n            rectangle.maxY = p.y;\r\n        }\r\n    }\r\n    return rectangle;\r\n}\r\nexport function bounds(grid) {\r\n    if (grid.tileTypes === 2) {\r\n        let sum = [];\r\n        const centers = grid.tiles.reduce((r, tile) => {\r\n            r[grid.getTileType(tile)].push(grid.center(tile));\r\n            return r;\r\n        }, [[], []]);\r\n        for (let i = 0; i < 2; i++) {\r\n            const b1 = boundsOfPoints(grid.vertices(grid.orientation, undefined, i));\r\n            const b2 = boundsOfPoints(centers[i]);\r\n            sum = sum.concat(Rectangle.POINTS(Rectangle.ADD(b1, b2)));\r\n        }\r\n        return boundsOfPoints(sum);\r\n    }\r\n    else {\r\n        const centers = grid.tiles.map((tile) => {\r\n            return grid.center(tile);\r\n        });\r\n        const b1 = boundsOfPoints(grid.vertices(grid.orientation));\r\n        const b2 = boundsOfPoints(centers);\r\n        return Rectangle.ADD(b1, b2);\r\n    }\r\n}\r\n//# sourceMappingURL=bounds.js.map","export var Axes4;\r\n(function (Axes4) {\r\n    Axes4[Axes4[\"N\"] = -1] = \"N\";\r\n    Axes4[Axes4[\"S\"] = 1] = \"S\";\r\n    Axes4[Axes4[\"W\"] = -2] = \"W\";\r\n    Axes4[Axes4[\"E\"] = 2] = \"E\";\r\n})(Axes4 || (Axes4 = {}));\r\nexport var Axes8;\r\n(function (Axes8) {\r\n    Axes8[Axes8[\"N\"] = 1] = \"N\";\r\n    Axes8[Axes8[\"E\"] = 2] = \"E\";\r\n    Axes8[Axes8[\"NW\"] = 3] = \"NW\";\r\n    Axes8[Axes8[\"SW\"] = 4] = \"SW\";\r\n    Axes8[Axes8[\"S\"] = -1] = \"S\";\r\n    Axes8[Axes8[\"W\"] = -2] = \"W\";\r\n    Axes8[Axes8[\"SE\"] = -3] = \"SE\";\r\n    Axes8[Axes8[\"NE\"] = -4] = \"NE\";\r\n})(Axes8 || (Axes8 = {}));\r\nexport var Axes6;\r\n(function (Axes6) {\r\n    Axes6[Axes6[\"N\"] = -1] = \"N\";\r\n    Axes6[Axes6[\"S\"] = 1] = \"S\";\r\n    Axes6[Axes6[\"NW\"] = -2] = \"NW\";\r\n    Axes6[Axes6[\"SE\"] = 2] = \"SE\";\r\n    Axes6[Axes6[\"NE\"] = -3] = \"NE\";\r\n    Axes6[Axes6[\"SW\"] = 3] = \"SW\";\r\n})(Axes6 || (Axes6 = {}));\r\n//# sourceMappingURL=Axes.js.map","export class Integer3 {\r\n    constructor(x = 0, y = 0, z = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    distance(b) {\r\n        return Math.floor((Math.abs(this.x - b.x) + Math.abs(this.y - b.y) + Math.abs(this.z - b.z)) / 2);\r\n    }\r\n    add(b) {\r\n        return new Integer3(this.x + b.x, this.y + b.y, this.z + b.z);\r\n    }\r\n    scale(k) {\r\n        return new Integer3(this.x * k, this.y * k, this.z * k);\r\n    }\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n    get value() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n    equals(other) {\r\n        return (this.x === other.x) && (this.y === other.y) && (this.z === other.z);\r\n    }\r\n    round() {\r\n        return new Integer3(Math.round(this.x), Math.round(this.y), Math.round(this.z));\r\n    }\r\n    cubeLength() {\r\n        return Math.floor((Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)) / 2);\r\n    }\r\n}\r\n//# sourceMappingURL=Integer3.js.map","import { Axes6 } from './Axes';\r\nimport { Integer3 } from './Integer3';\r\n// From http://www.redblobgames.com/grids/hexagons/\r\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\r\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\r\n// Original source: http://www.redblobgames.com/grids/hexagons/Cube.hx\r\n/**\r\n * ![](../../examples/output/hexagonal-tile.svg)\r\n */\r\nexport class HexagonalTile extends Integer3 {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.tiles = [];\r\n    }\r\n    get key() {\r\n        return this.toString();\r\n    }\r\n    shift() {\r\n        return HexagonalTile.directions[4][1];\r\n    }\r\n    directions() {\r\n        return HexagonalTile.directions;\r\n    }\r\n    add(a) {\r\n        const r = super.add(a);\r\n        return new HexagonalTile(r.x, r.y, r.z);\r\n    }\r\n    scale(a) {\r\n        const r = super.scale(a);\r\n        return new HexagonalTile(r.x, r.y, r.z);\r\n    }\r\n    neighbors() {\r\n        const results = [];\r\n        for (const a of HexagonalTile.directions) {\r\n            results.push([a[0], this.add(a[1])]);\r\n        }\r\n        return results;\r\n    }\r\n    right() {\r\n        const x = this.x;\r\n        this.x = -this.z;\r\n        this.z = -this.y;\r\n        this.y = -x;\r\n        return this;\r\n    }\r\n    left() {\r\n        const z = this.z;\r\n        this.z = -this.x;\r\n        this.x = -this.y;\r\n        this.y = -z;\r\n        return this;\r\n    }\r\n}\r\nHexagonalTile.directions = [\r\n    [Axes6.NW, new HexagonalTile(1, -1, 0)],\r\n    [Axes6.NE, new HexagonalTile(1, 0, -1)],\r\n    [Axes6.N, new HexagonalTile(0, 1, -1)],\r\n    [Axes6.SE, new HexagonalTile(-1, 1, 0)],\r\n    [Axes6.SW, new HexagonalTile(-1, 0, 1)],\r\n    [Axes6.S, new HexagonalTile(0, -1, 1)]\r\n];\r\n//# sourceMappingURL=HexagonalTile.js.map","export { Integer2 as Position } from './Integer2';\r\n//# sourceMappingURL=Position.js.map","export var TileType;\r\n(function (TileType) {\r\n    TileType[TileType[\"Simple\"] = 1] = \"Simple\";\r\n    TileType[TileType[\"Variable\"] = 2] = \"Variable\";\r\n})(TileType || (TileType = {}));\r\n//# sourceMappingURL=TileType.js.map","import { bounds } from './bounds';\r\nimport { SQRT_3, SQRT_3_2, SQRT_3_3 } from './Constants';\r\nimport { Float2 } from './Float2';\r\nimport { HexagonalTile } from './HexagonalTile';\r\nimport { Position } from './Position';\r\nimport { Shape } from './Shape';\r\nimport { TileType } from './TileType';\r\n// From http://www.redblobgames.com/grids/hexagons/\r\n// Copyright 2012 Red Blob Games <redblobgames@gmail.com>\r\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\r\n// Original source: http://www.redblobgames.com/grids/hexagons/Grid.hx\r\n/**\r\n * ![](../../examples/output/hexagonal-grid.svg)\r\n */\r\nexport class HexagonalGrid {\r\n    constructor(scale, orientation = false, shape = Shape.Hexagonal, x = 1, y) {\r\n        this.scaleY = -1;\r\n        this.angle = -30;\r\n        this.tileTypes = TileType.Simple;\r\n        this.scale = scale;\r\n        this.radius = SQRT_3_2 * scale / SQRT_3_2 / 2;\r\n        this.orientation = orientation;\r\n        const yy = y || x;\r\n        this.x = x;\r\n        this.y = yy;\r\n        this.shape = shape;\r\n        if (shape === Shape.Even && orientation === false) {\r\n            this.toTile = HexagonalGrid.EVEN_Q_TO_CUBE;\r\n            this.toPoint = HexagonalGrid.CUBE_TO_EVEN_Q;\r\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\r\n        }\r\n        else if (shape === Shape.Even && orientation === true) {\r\n            this.toTile = HexagonalGrid.EVEN_R_TO_CUBE;\r\n            this.toPoint = HexagonalGrid.CUBE_TO_EVEN_R;\r\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\r\n        }\r\n        else if (shape === Shape.Odd && orientation === false) {\r\n            this.toTile = HexagonalGrid.ODD_Q_TO_CUBE;\r\n            this.toPoint = HexagonalGrid.CUBE_TO_ODD_Q;\r\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\r\n        }\r\n        else if (shape === Shape.Odd && orientation === true) {\r\n            this.toTile = HexagonalGrid.ODD_R_TO_CUBE;\r\n            this.toPoint = HexagonalGrid.CUBE_TO_ODD_R;\r\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\r\n        }\r\n        else if (shape === Shape.Hexagonal) {\r\n            // this.toTile = HexagonalGrid.EVEN_Q_TO_CUBE;\r\n            // this.toPoint = HexagonalGrid.CUBE_TO_EVEN_Q;\r\n            this.toTile = HexagonalGrid.TWO_AXIS_TO_CUBE;\r\n            this.toPoint = HexagonalGrid.CUBE_TO_TWO_AXIS;\r\n            this.tiles = HexagonalGrid.HEXAGONAL_SHAPE(x);\r\n        }\r\n        else if (shape === Shape.Triangular) {\r\n            this.toTile = HexagonalGrid.EVEN_Q_TO_CUBE;\r\n            this.toPoint = HexagonalGrid.CUBE_TO_EVEN_Q;\r\n            this.tiles = HexagonalGrid.TRIANGULAR_SHAPE(x);\r\n        }\r\n        else { // if (shape === Shape.Rhombus)\r\n            this.toTile = HexagonalGrid.TWO_AXIS_TO_CUBE;\r\n            this.toPoint = HexagonalGrid.CUBE_TO_TWO_AXIS;\r\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\r\n        }\r\n    }\r\n    static TWO_AXIS_TO_CUBE(position) {\r\n        return new HexagonalTile(position.x, -position.y - position.x, position.y);\r\n    }\r\n    static CUBE_TO_TWO_AXIS(tile) {\r\n        return new Position(tile.x, tile.z);\r\n    }\r\n    static TWO_AXIS_TO_CUBE_XY(position) {\r\n        return new HexagonalTile(position.x, position.y, -position.x - position.y);\r\n    }\r\n    static CUBE_TO_TWO_AXIS_XY(tile) {\r\n        return new Position(tile.x, tile.y);\r\n    }\r\n    static TWO_AXIS_TO_CUBE_YZ(position) {\r\n        return new HexagonalTile(-position.x - position.y, position.x, position.y);\r\n    }\r\n    static CUBE_TO_TWO_AXIS_YZ(tile) {\r\n        return new Position(tile.y, tile.z);\r\n    }\r\n    static ODD_Q_TO_CUBE(position) {\r\n        /* tslint:disable:no-bitwise */\r\n        const x = position.x;\r\n        const z = position.y - ((position.x - (position.x & 1)) >> 1);\r\n        /* tslint:enable:no-bitwise */\r\n        return new HexagonalTile(x, -x - z, z);\r\n    }\r\n    static CUBE_TO_ODD_Q(tile) {\r\n        const x = tile.x;\r\n        const z = tile.z;\r\n        /* tslint:disable:no-bitwise */\r\n        return new Position(x, z + ((x - (x & 1)) >> 1));\r\n        /* tslint:enable:no-bitwise */\r\n    }\r\n    static EVEN_Q_TO_CUBE(position) {\r\n        /* tslint:disable:no-bitwise */\r\n        const x = position.x;\r\n        const z = position.y - ((position.x + (position.x & 1)) >> 1);\r\n        /* tslint:enable:no-bitwise */\r\n        return new HexagonalTile(x, -x - z, z);\r\n    }\r\n    static CUBE_TO_EVEN_Q(tile) {\r\n        const x = tile.x;\r\n        const z = tile.z;\r\n        /* tslint:disable:no-bitwise */\r\n        return new Position(x, z + ((x + (x & 1)) >> 1));\r\n        /* tslint:enable:no-bitwise */\r\n    }\r\n    static ODD_R_TO_CUBE(position) {\r\n        /* tslint:disable:no-bitwise */\r\n        const z = position.y;\r\n        const x = position.x - ((position.y - (position.y & 1)) >> 1);\r\n        /* tslint:enable:no-bitwise */\r\n        return new HexagonalTile(x, -x - z, z);\r\n    }\r\n    static CUBE_TO_ODD_R(tile) {\r\n        const x = tile.x;\r\n        const z = tile.z;\r\n        /* tslint:disable:no-bitwise */\r\n        return new Position(x + ((z - (z & 1)) >> 1), z);\r\n        /* tslint:enable:no-bitwise */\r\n    }\r\n    static EVEN_R_TO_CUBE(position) {\r\n        /* tslint:disable:no-bitwise */\r\n        const z = position.y;\r\n        const x = position.x - ((position.y + (position.y & 1)) >> 1);\r\n        /* tslint:enable:no-bitwise */\r\n        return new HexagonalTile(x, -x - z, z);\r\n    }\r\n    static CUBE_TO_EVEN_R(tile) {\r\n        const x = tile.x;\r\n        const z = tile.z;\r\n        /* tslint:disable:no-bitwise */\r\n        return new Position(x + ((z + (z & 1)) >> 1), z);\r\n        /* tslint:enable:no-bitwise */\r\n    }\r\n    static TRAPEZOIDAL_SHAPE(minQ, maxQ, minR, maxR, toCube) {\r\n        const hexes = [];\r\n        for (let q = minQ; q < maxQ; q++) {\r\n            for (let r = minR; r < maxR; r++) {\r\n                hexes.push(toCube(new Position(q, r)));\r\n            }\r\n        }\r\n        return hexes;\r\n    }\r\n    static TRIANGULAR_SHAPE(size) {\r\n        const hexes = [];\r\n        for (let k = 0; k < size; k++) {\r\n            for (let i = 0; i < (k + 1); i++) {\r\n                hexes.push(new HexagonalTile(i, -k, k - i));\r\n            }\r\n        }\r\n        return hexes;\r\n    }\r\n    static HEXAGONAL_SHAPE(size) {\r\n        const hexes = [];\r\n        for (let x = -size; x < size; x++) {\r\n            for (let y = -size; y < size; y++) {\r\n                const z = -x - y;\r\n                if (Math.abs(x) < size && Math.abs(y) < size && Math.abs(z) < size) {\r\n                    hexes.push(new HexagonalTile(x, y, z));\r\n                }\r\n            }\r\n        }\r\n        return hexes;\r\n    }\r\n    static REGION(xmin, xmax, ymin, ymax, zmin, zmax) {\r\n        const results = [];\r\n        for (let x = xmin; x <= xmax; x++) {\r\n            for (let y = Math.max(ymin, -x - zmax); y <= Math.min(ymax, -x - zmin); y++) {\r\n                const z = -x - y;\r\n                results.push(new HexagonalTile(x, y, z));\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    bounds() {\r\n        return bounds(this);\r\n    }\r\n    vertices(orientation, scale) {\r\n        const points = [];\r\n        let s = (scale === undefined) ? this.scale : scale;\r\n        s /= SQRT_3_2;\r\n        const o = (orientation === undefined) ? false : this.orientation;\r\n        for (let i = 0; i < 6; i++) {\r\n            const angle = Math.PI * (i * 2 - (o ? 1 : 0)) * 2 / 12;\r\n            points.push(new Float2(s * Math.cos(angle) * 0.5, s * Math.sin(angle) * 0.5));\r\n        }\r\n        return points;\r\n    }\r\n    center(tile) {\r\n        let s;\r\n        const size = this.scale / SQRT_3_2 / 2;\r\n        if (this.orientation) {\r\n            s = new Float2(SQRT_3 * tile.x + SQRT_3_2 * tile.z, tile.z * this.scaleY * 1.5);\r\n        }\r\n        else {\r\n            s = new Float2(tile.x * 1.5, (SQRT_3_2 * tile.x + SQRT_3 * tile.z) * this.scaleY);\r\n        }\r\n        return s.scale(size);\r\n    }\r\n    position(p) {\r\n        const size = this.scale / 2;\r\n        const pp = p.scale(1 / size);\r\n        pp.y *= this.scaleY;\r\n        let q;\r\n        let r;\r\n        if (this.orientation) {\r\n            q = SQRT_3_3 * pp.x + -1 / 3 * pp.y;\r\n            r = 2 / 3 * pp.y;\r\n        }\r\n        else {\r\n            q = 2 / 3 * pp.x;\r\n            r = -1 / 3 * pp.x + SQRT_3_3 * pp.y;\r\n        }\r\n        return new HexagonalTile(Math.round(q), Math.round(-q - r), Math.round(r));\r\n    }\r\n    tile(x, y) {\r\n        return this.toTile ? this.toTile(new Position(x, y)) : undefined;\r\n    }\r\n}\r\nHexagonalGrid.shapes = [Shape.Hexagonal,\r\n    Shape.Rhombus, Shape.Even, Shape.Odd, Shape.Triangular];\r\n//# sourceMappingURL=HexagonalGrid.js.map","import { SQRT_2, SQRT_2_2, SQRT_2_4 } from './Constants';\r\nimport { Float2 } from './Float2';\r\nimport { HexagonalGrid } from './HexagonalGrid';\r\nimport { Shape } from './Shape';\r\n/**\r\n * ![](../../examples/output/brick-grid.svg)\r\n */\r\nexport class BrickGrid extends HexagonalGrid {\r\n    constructor(scale, orientation = false, shape = Shape.Hexagonal, x = 1, y) {\r\n        super(scale, orientation, shape, x, y);\r\n        this.angle = 0;\r\n        this.radius = SQRT_2_4 * scale;\r\n    }\r\n    vertices(orientation, scale) {\r\n        const s = (scale === undefined) ? this.scale : scale;\r\n        const points = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            const angle = Math.PI * (i * 2 - 1) * 2 / 8;\r\n            points.push(new Float2(s * Math.cos(angle) * 0.5, s * Math.sin(angle) * 0.5));\r\n        }\r\n        return points;\r\n    }\r\n    center(cube) {\r\n        let s;\r\n        const size = this.scale / 2;\r\n        if (this.orientation) {\r\n            s = new Float2(SQRT_2 * cube.x + SQRT_2_2 * cube.z, SQRT_2 * cube.z * this.scaleY);\r\n        }\r\n        else {\r\n            s = new Float2(SQRT_2 * cube.x, (SQRT_2_2 * cube.x + SQRT_2 * cube.z) * this.scaleY);\r\n        }\r\n        return s.scale(size);\r\n    }\r\n}\r\n//# sourceMappingURL=BrickGrid.js.map","import { Integer2 } from './Integer2';\r\n/**\r\n * ![](../../examples/output/triangular-tile.svg)\r\n */\r\nexport class TriangularTile extends Integer2 {\r\n    constructor(x = 0, y = 0, s = false) {\r\n        super(x, y);\r\n        this.s = s;\r\n    }\r\n    get key() {\r\n        return this.toString();\r\n    }\r\n    get value() {\r\n        return [this.x, this.y, this.s];\r\n    }\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n    equals(p) {\r\n        return (this.s === p.s) && super.equals(p);\r\n    }\r\n    shift() {\r\n        return TriangularTile.directions1[0][1];\r\n    }\r\n    directions() {\r\n        return this.s ? TriangularTile.directions2 : TriangularTile.directions1;\r\n    }\r\n    opposite(n) {\r\n        return TriangularTile.opposites[this.s.toString()][n];\r\n    }\r\n    add(a) {\r\n        const r = super.add(a);\r\n        return new TriangularTile(r.x, r.y, a.s);\r\n    }\r\n    scale(a) {\r\n        const r = super.scale(a);\r\n        return new TriangularTile(r.x, r.y);\r\n    }\r\n    multiNeighbors() {\r\n        const results = [];\r\n        for (let dir = 1; dir < 4; dir++) {\r\n            const d = TriangularTile.multiDirections[this.s.toString()][dir];\r\n            const t = this.s ? TriangularTile.directions2[d][1] : TriangularTile.directions1[d][1];\r\n            results.push([dir, this.add(t)]);\r\n            results.push([TriangularTile.multiOpposites[this.s.toString()][dir], this.add(t)]);\r\n        }\r\n        return results;\r\n    }\r\n    neighbors() {\r\n        const results = [];\r\n        for (let dir = 0; dir < 3; dir++) {\r\n            results.push([TriangularTile.directions1[dir][0],\r\n                this.add(this.s ? TriangularTile.directions2[dir][1] : TriangularTile.directions1[dir][1])]);\r\n        }\r\n        return results;\r\n    }\r\n}\r\nTriangularTile.directions1 = [\r\n    [1, new TriangularTile(0, 0, true)],\r\n    [2, new TriangularTile(-1, 0, true)],\r\n    [3, new TriangularTile(0, -1, true)]\r\n];\r\nTriangularTile.directions2 = [\r\n    [1, new TriangularTile(0, 1, false)],\r\n    [2, new TriangularTile(0, 0, false)],\r\n    [3, new TriangularTile(1, 0, false)]\r\n];\r\nTriangularTile.opposites = {\r\n    false: {\r\n        1: 3,\r\n        2: 1,\r\n        3: 2\r\n    },\r\n    true: {\r\n        1: 2,\r\n        2: 3,\r\n        3: 1\r\n    }\r\n};\r\nTriangularTile.multiOpposites = {\r\n    false: {\r\n        '-1': 2,\r\n        '-2': 3,\r\n        '-3': 1,\r\n        1: -3,\r\n        2: -1,\r\n        3: -2\r\n    },\r\n    true: {\r\n        '-1': 3,\r\n        '-2': 1,\r\n        '-3': 2,\r\n        1: -2,\r\n        2: -3,\r\n        3: -1\r\n    }\r\n};\r\nTriangularTile.multiDirections = {\r\n    false: {\r\n        1: 0,\r\n        2: 2,\r\n        3: 1\r\n    },\r\n    true: {\r\n        1: 0,\r\n        2: 2,\r\n        3: 1\r\n    }\r\n};\r\n//# sourceMappingURL=TriangularTile.js.map","import { bounds } from './bounds';\r\nimport { SQRT_3_2, SQRT_3_3, SQRT_3_6 } from './Constants';\r\nimport { Float2 } from './Float2';\r\nimport { Position } from './Position';\r\nimport { Shape } from './Shape';\r\nimport { TileType } from './TileType';\r\nimport { TriangularTile } from './TriangularTile';\r\n/**\r\n * ![](../../examples/output/triangular-grid.svg)\r\n */\r\nexport class TriangularGrid {\r\n    constructor(scale, orientation = false, shape = Shape.Triangular, x = 1, y = 1) {\r\n        this.scaleY = -1;\r\n        this.angle = -60;\r\n        this.tileTypes = TileType.Variable;\r\n        this.scale = scale;\r\n        this.radius = SQRT_3_6 * scale / SQRT_3_2;\r\n        this.orientation = orientation;\r\n        this.x = x;\r\n        this.y = y;\r\n        if (shape === Shape.Rhombus) {\r\n            this.tiles = this.rhombus();\r\n            this.orientation = false;\r\n        }\r\n        else if (shape === Shape.Hexagonal) {\r\n            this.tiles = this.hexagonalShape(x);\r\n            this.orientation = false;\r\n        }\r\n        else {\r\n            this.tiles = this.triangle();\r\n            this.orientation = false;\r\n        }\r\n        this.toPoint = (tile) => {\r\n            return new Position(tile.x * 2 + (tile.s ? 1 : 0), tile.y);\r\n        };\r\n        this.toTile = (position) => {\r\n            return new TriangularTile(position.x / 2 - (position.x % 2), position.y);\r\n        };\r\n    }\r\n    bounds() {\r\n        return bounds(this);\r\n    }\r\n    center(tile) {\r\n        const scale = this.scale / SQRT_3_2;\r\n        return new Float2((tile.x * 2 + (tile.s ? 1 : 0) + tile.y) * scale / 2, scale * (tile.y * (SQRT_3_2) + (tile.s ? 0 : -(SQRT_3_6))) * this.scaleY);\r\n    }\r\n    vertices(orientation, scale, tileType = 0) {\r\n        let s = (scale === undefined) ? this.scale : scale;\r\n        s /= SQRT_3_2;\r\n        if (this.scaleY > 0 ? tileType === 0 : tileType !== 0) {\r\n            return [\r\n                new Float2(0, -s * SQRT_3_3),\r\n                new Float2(-s / 2, s * SQRT_3_6),\r\n                new Float2(s / 2, s * SQRT_3_6)\r\n            ];\r\n        }\r\n        else {\r\n            return [\r\n                new Float2(0, s * (SQRT_3_6 + (SQRT_3_6))),\r\n                new Float2(-s / 2, -s * (SQRT_3_3 - (SQRT_3_6))),\r\n                new Float2(s / 2, -s * (SQRT_3_3 - (SQRT_3_6)))\r\n            ];\r\n        }\r\n    }\r\n    position(p) {\r\n        return new TriangularTile(Math.round(p.x), Math.round(p.y), false);\r\n    }\r\n    getTileType(tile) {\r\n        return tile.s ? 0 : 1;\r\n    }\r\n    tile(x, y) {\r\n        return new TriangularTile(Math.floor(x / 2), y, !!(x % 2));\r\n    }\r\n    rhombus() {\r\n        const results = [];\r\n        for (let px = 0; px < this.x; px++) {\r\n            for (let py = 0; py < this.y; py++) {\r\n                results.push(new TriangularTile(px, py, false));\r\n                results.push(new TriangularTile(px, py, true));\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    triangle() {\r\n        const results = [];\r\n        for (let py = 0; py < this.x; py++) {\r\n            for (let px = 0; px < (this.x - py); px++) {\r\n                results.push(new TriangularTile(px, py, false));\r\n                if (px < (this.x - py - 1)) {\r\n                    results.push(new TriangularTile(px, py, true));\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n    hexagonalShape(size) {\r\n        const results = [];\r\n        for (let x = -size; x < size; x++) {\r\n            for (let y = -size; y < size; y++) {\r\n                if (Math.abs(-x - y) <= size && (x + y) < size) {\r\n                    results.push(new TriangularTile(x, y, false));\r\n                }\r\n                if ((Math.abs(-x - y) - 1) <= size && (x + y + 1) < size) {\r\n                    results.push(new TriangularTile(x, y, true));\r\n                }\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n}\r\nTriangularGrid.shapes = [Shape.Hexagonal, Shape.Rhombus, Shape.Triangular];\r\n//# sourceMappingURL=TriangularGrid.js.map","import { Integer3 } from './Integer3';\r\nexport class Float3 {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    static ROUND(h) {\r\n        let rx = Math.round(h.x);\r\n        let ry = Math.round(h.y);\r\n        let rz = Math.round(h.z);\r\n        const xDiff = Math.abs(rx - h.x);\r\n        const yDiff = Math.abs(ry - h.y);\r\n        const zDiff = Math.abs(rz - h.z);\r\n        if (xDiff > yDiff && xDiff > zDiff) {\r\n            rx = -ry - rz;\r\n        }\r\n        else if (yDiff > zDiff) {\r\n            ry = -rx - rz;\r\n        }\r\n        else {\r\n            rz = -rx - ry;\r\n        }\r\n        return new Integer3(rx, ry, rz);\r\n    }\r\n    static LERP(a, b, t) {\r\n        return new Float3(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t);\r\n    }\r\n    static LINE(a, b) {\r\n        const N = a.distance(b);\r\n        const results = [];\r\n        for (let i = 0; i < (N + 1); i++) {\r\n            results.push(Float3.ROUND(Float3.LERP(a, b, 1 / Math.max(1, N) * i)));\r\n        }\r\n        return results;\r\n    }\r\n    equals(other) {\r\n        return (this.x === other.x) && (this.y === other.y) && (this.z === other.z);\r\n    }\r\n    get value() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n    toString() {\r\n        return this.value.toString();\r\n    }\r\n    round() {\r\n        return Float3.ROUND(this);\r\n    }\r\n}\r\n//# sourceMappingURL=Float3.js.map","import { Axes4 } from './Axes';\r\nimport { Integer3 } from './Integer3';\r\n/**\r\n * ![](../../examples/output/radial-tile.svg)\r\n * x: angle position\r\n * y: radius position\r\n * z: radius width\r\n * w: angular length\r\n */\r\nexport class RadialTile extends Integer3 {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.tiles = [];\r\n    }\r\n    get value() {\r\n        return [this.x, this.y];\r\n    }\r\n    get key() {\r\n        return this.toString();\r\n    }\r\n    shift() {\r\n        return new RadialTile(-1, 1, 0);\r\n    }\r\n    directions() {\r\n        return RadialTile.directions;\r\n    }\r\n    add(a) {\r\n        const length = this.z || a.z;\r\n        let angle = this.x + a.x;\r\n        angle = angle % length;\r\n        angle = (angle + length) % length;\r\n        return new RadialTile(angle, this.y + a.y, length);\r\n    }\r\n    scale(a) {\r\n        return new RadialTile(this.x, this.y * a, this.z);\r\n    }\r\n    cubeLength() {\r\n        return Math.floor(Math.abs(this.y));\r\n    }\r\n    neighbors() {\r\n        const results = [];\r\n        for (const a of RadialTile.directions) {\r\n            results.push([a[0], this.add(a[1])]);\r\n        }\r\n        return results;\r\n    }\r\n}\r\nRadialTile.directions = [\r\n    [Axes4.N, new RadialTile(0, -1, 0)],\r\n    [Axes4.S, new RadialTile(0, 1, 0)],\r\n    [Axes4.E, new RadialTile(1, 0, 0)],\r\n    [Axes4.W, new RadialTile(-1, 0, 0)]\r\n];\r\n//# sourceMappingURL=RadialTile.js.map","import { ANG, DEG_TO_RAD } from './Constants';\r\nimport { Float2 } from './Float2';\r\nimport { Float3 } from './Float3';\r\nimport { Position } from './Position';\r\nimport { RadialTile } from './RadialTile';\r\nimport { Rectangle } from './Rectangle';\r\nimport { Shape } from './Shape';\r\nimport { TileType } from './TileType';\r\n/**\r\n * ![](../../examples/output/Radial-grid.svg)\r\n */\r\nexport class RadialGrid {\r\n    constructor(scale, orientation = false, shape = Shape.Even, x = 1, y = 1, tile = RadialTile, startY = 0) {\r\n        this.scaleY = -1;\r\n        this.angle = -0;\r\n        this.tileTypes = TileType.Simple;\r\n        this.irregular = true;\r\n        this.scale = scale;\r\n        this.radius = scale / 2;\r\n        this.orientation = orientation;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.startY = startY;\r\n        this.tileCtor = tile;\r\n        const results = [];\r\n        for (let px = 0; px < x; px++) {\r\n            for (let py = startY; py < y; py++) {\r\n                results.push(new tile(px, py, x));\r\n            }\r\n        }\r\n        this.tiles = results;\r\n        this.toTile = (p) => new this.tileCtor(p.x, p.y);\r\n        this.toPoint = (p) => new Position(p.x, p.y);\r\n    }\r\n    bounds() {\r\n        const r = this.scale * this.y;\r\n        return new Rectangle(-r, r, -r, r);\r\n        // return bounds(this);\r\n    }\r\n    vertices(orientation, scale, tileType, tile) {\r\n        const t = tile;\r\n        const points = [];\r\n        const c = this.center(t);\r\n        points.push(this.center(new Float3(t.x - 0.5, t.y - 0.5, t.z)));\r\n        points.push(this.center(new Float3(t.x + 0.5, t.y - 0.5, t.z)));\r\n        points.push(this.center(new Float3(t.x + 0.5, t.y + 0.5, t.z)));\r\n        points.push(this.center(new Float3(t.x - 0.5, t.y + 0.5, t.z)));\r\n        return points.map((p) => new Float2(p.x - c.x, p.y - c.y));\r\n    }\r\n    path(tile) {\r\n        const p = this.vertices(false, 0, 0, tile);\r\n        const c = this.center(tile);\r\n        const r1 = this.scale * tile.y;\r\n        const r2 = this.scale * (tile.y + 1);\r\n        return `M ${p[0].x} ${p[0].y} A ${r1} ${r1} 0 0 0 ${p[1].x} ${p[1].y} `\r\n            + `L ${p[2].x} ${p[2].y} A ${r2} ${r2} 0 0 1 ${p[3].x} ${p[3].y} Z`;\r\n    }\r\n    position(p) {\r\n        return new this.tileCtor(Math.round(p.x / this.scale), Math.round(p.y / this.scale * this.scaleY));\r\n    }\r\n    tile(x, y) {\r\n        return this.toTile(new Position(x, y));\r\n    }\r\n    center(tile) {\r\n        let angle;\r\n        if (this.orientation) {\r\n            angle = tile.x + 0.5;\r\n            angle = angle % tile.z;\r\n            angle = (angle + tile.z) % tile.z;\r\n            angle = (angle * DEG_TO_RAD) * (ANG / tile.z);\r\n        }\r\n        else {\r\n            angle = (tile.x * DEG_TO_RAD) * (ANG / tile.z);\r\n        }\r\n        return new Float2((tile.y + 0.5) * this.scale * Math.sin(angle), (tile.y + 0.5) * this.scale * Math.cos(angle));\r\n    }\r\n}\r\n//# sourceMappingURL=RadialGrid.js.map","import { Axes4 } from './Axes';\r\nimport { Integer2 } from './Integer2';\r\n/**\r\n * ![](../../examples/output/rectangular-tile.svg)\r\n */\r\nexport class RectangularTile extends Integer2 {\r\n    get key() {\r\n        return this.toString();\r\n    }\r\n    shift() {\r\n        return new RectangularTile(-1, 1);\r\n    }\r\n    directions() {\r\n        return RectangularTile.directions;\r\n    }\r\n    add(a) {\r\n        const r = super.add(a);\r\n        return new RectangularTile(r.x, r.y);\r\n    }\r\n    scale(a) {\r\n        const r = super.scale(a);\r\n        return new RectangularTile(r.x, r.y);\r\n    }\r\n    neighbors() {\r\n        const results = [];\r\n        for (const dir of RectangularTile.directions) {\r\n            results.push([dir[0], this.add(dir[1])]);\r\n        }\r\n        return results;\r\n    }\r\n}\r\nRectangularTile.directions = [\r\n    [Axes4.N, new RectangularTile(0, -1)],\r\n    [Axes4.E, new RectangularTile(1, 0)],\r\n    [Axes4.S, new RectangularTile(0, 1)],\r\n    [Axes4.W, new RectangularTile(-1, 0)]\r\n];\r\n//# sourceMappingURL=RectangularTile.js.map","import { bounds } from './bounds';\r\nimport { SQRT_2 } from './Constants';\r\nimport { Float2 } from './Float2';\r\nimport { Position } from './Position';\r\nimport { RectangularTile } from './RectangularTile';\r\nimport { Shape } from './Shape';\r\nimport { TileType } from './TileType';\r\n// TypeScript version of http://www.redblobgames.com/articles/grids/hexagons/\r\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\r\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\r\n/**\r\n * ![](../../examples/output/rectangular-grid.svg)\r\n */\r\nexport class RectangularGrid {\r\n    constructor(scale, orientation = false, shape = Shape.Even, x = 1, y = 1, tile = RectangularTile, startY = 0) {\r\n        this.scaleY = -1;\r\n        this.angle = -45;\r\n        this.tileTypes = TileType.Simple;\r\n        this.scale = scale;\r\n        this.radius = scale / 2;\r\n        this.orientation = orientation;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.startY = y;\r\n        this.tileCtor = tile;\r\n        const results = [];\r\n        for (let px = 0; px < x; px++) {\r\n            for (let py = startY; py < y; py++) {\r\n                results.push(new tile(px, py));\r\n            }\r\n        }\r\n        this.tiles = results;\r\n        this.toTile = (p) => new this.tileCtor(p.x, p.y);\r\n        this.toPoint = (p) => new Position(p.x, p.y);\r\n    }\r\n    bounds() {\r\n        return bounds(this);\r\n    }\r\n    center(tile) {\r\n        if (this.orientation) {\r\n            return new Float2(tile.x * this.scale / SQRT_2 + tile.y * this.scale * this.scaleY / SQRT_2, tile.y * this.scale * this.scaleY / SQRT_2 - tile.x * this.scale / SQRT_2);\r\n        }\r\n        else {\r\n            return new Float2(tile.x * this.scale, tile.y * this.scale * this.scaleY);\r\n        }\r\n    }\r\n    vertices(orientation, scale) {\r\n        const points = [];\r\n        let s = (scale === undefined) ? this.scale : scale;\r\n        const o = (orientation === undefined) ? false : this.orientation;\r\n        if (o) {\r\n            s *= SQRT_2;\r\n            points.push(new Float2(-s / 2, 0));\r\n            points.push(new Float2(0, -s / 2));\r\n            points.push(new Float2(s / 2, 0));\r\n            points.push(new Float2(0, s / 2));\r\n        }\r\n        else {\r\n            points.push(new Float2(-s / 2, -s / 2));\r\n            points.push(new Float2(-s / 2, s / 2));\r\n            points.push(new Float2(s / 2, s / 2));\r\n            points.push(new Float2(s / 2, -s / 2));\r\n        }\r\n        return points;\r\n    }\r\n    position(p) {\r\n        return new this.tileCtor(Math.round(p.x / this.scale), Math.round(p.y / this.scale * this.scaleY));\r\n    }\r\n    tile(x, y) {\r\n        return this.toTile(new Position(x, y));\r\n    }\r\n}\r\n//# sourceMappingURL=RectangularGrid.js.map","import { Axes8 } from './Axes';\r\nimport { Integer3 } from './Integer3';\r\n/**\r\n * ![](../../examples/output/radial-tile.svg)\r\n * x: angle position\r\n * y: radius position\r\n * z: angular length\r\n */\r\nexport class Radial8Tile extends Integer3 {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.tiles = [];\r\n    }\r\n    get value() {\r\n        return [this.x, this.y];\r\n    }\r\n    get key() {\r\n        return this.toString();\r\n    }\r\n    shift() {\r\n        return new Radial8Tile(-1, 1, 0);\r\n    }\r\n    directions() {\r\n        return Radial8Tile.directions;\r\n    }\r\n    add(a) {\r\n        const length = this.z || a.z;\r\n        let angle = this.x + a.x;\r\n        angle = angle % length;\r\n        angle = (angle + length) % length;\r\n        return new Radial8Tile(angle, this.y + a.y, length);\r\n    }\r\n    scale(a) {\r\n        return new Radial8Tile(this.x, this.y * a, this.z);\r\n    }\r\n    cubeLength() {\r\n        return Math.floor(Math.abs(this.y));\r\n    }\r\n    neighbors() {\r\n        const results = [];\r\n        for (const a of Radial8Tile.directions) {\r\n            results.push([a[0], this.add(a[1])]);\r\n        }\r\n        return results;\r\n    }\r\n}\r\nRadial8Tile.directions = [\r\n    [Axes8.N, new Radial8Tile(0, -1, 0)],\r\n    [Axes8.E, new Radial8Tile(1, 0, 0)],\r\n    [Axes8.NW, new Radial8Tile(-1, -1, 0)],\r\n    [Axes8.SW, new Radial8Tile(1, -1, 0)],\r\n    [Axes8.S, new Radial8Tile(0, 1, 0)],\r\n    [Axes8.W, new Radial8Tile(-1, 0, 0)],\r\n    [Axes8.SE, new Radial8Tile(1, 1, 0)],\r\n    [Axes8.NE, new Radial8Tile(-1, 1, 0)]\r\n];\r\n//# sourceMappingURL=Radial8Tile.js.map","import { Axes8 } from './Axes';\r\nimport { Integer2 } from './Integer2';\r\nimport { RectangularTile } from './RectangularTile';\r\n/**\r\n * ![](../../examples/output/rectangular-tile.svg)\r\n */\r\nexport class Rectangular8Tile extends Integer2 {\r\n    get key() {\r\n        return this.toString();\r\n    }\r\n    shift() {\r\n        return new Rectangular8Tile(-1, 1);\r\n    }\r\n    directions() {\r\n        return Rectangular8Tile.directions;\r\n    }\r\n    sides() {\r\n        return Rectangular8Tile.sides;\r\n    }\r\n    add(a) {\r\n        const r = super.add(a);\r\n        return new Rectangular8Tile(r.x, r.y);\r\n    }\r\n    scale(a) {\r\n        const r = super.scale(a);\r\n        return new Rectangular8Tile(r.x, r.y);\r\n    }\r\n    neighbors() {\r\n        const results = [];\r\n        for (const dir of Rectangular8Tile.directions) {\r\n            results.push([dir[0], this.add(dir[1])]);\r\n        }\r\n        return results;\r\n    }\r\n    sideNeighbors() {\r\n        const results = [];\r\n        for (const dir of RectangularTile.directions) {\r\n            results.push([dir[0], this.add(dir[1])]);\r\n        }\r\n        return results;\r\n    }\r\n}\r\nRectangular8Tile.directions = [\r\n    [Axes8.N, new Rectangular8Tile(0, -1)],\r\n    [Axes8.E, new Rectangular8Tile(1, 0)],\r\n    [Axes8.NW, new Rectangular8Tile(-1, -1)],\r\n    [Axes8.SW, new Rectangular8Tile(1, -1)],\r\n    [Axes8.S, new Rectangular8Tile(0, 1)],\r\n    [Axes8.W, new Rectangular8Tile(-1, 0)],\r\n    [Axes8.SE, new Rectangular8Tile(1, 1)],\r\n    [Axes8.NE, new Rectangular8Tile(-1, 1)]\r\n];\r\nRectangular8Tile.sides = [\r\n    Rectangular8Tile.directions[0],\r\n    Rectangular8Tile.directions[1],\r\n    Rectangular8Tile.directions[4],\r\n    Rectangular8Tile.directions[5]\r\n];\r\n//# sourceMappingURL=Rectangular8Tile.js.map","import { ANG_4, DEG_TO_RAD } from './Constants';\r\nexport function instance(obj) {\r\n    return new obj.constructor();\r\n}\r\nexport function enumerate(obj) {\r\n    const result = {};\r\n    const keys = Object.keys(obj);\r\n    for (const i of keys) {\r\n        const value = parseInt(i, 10);\r\n        if (value >= 0) {\r\n            result[obj[i]] = value;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport function mapped(available, selection) {\r\n    return selection.filter((t) => available.has(t[1].key))\r\n        .map((t) => [t[0], available.get(t[1].key)]);\r\n}\r\nexport function toMap(tiles) {\r\n    return new Map(tiles.map((t) => ([t.key, t])));\r\n}\r\nexport function toArray(m) {\r\n    return Array.from(m.values());\r\n}\r\nexport function link(tilesMap) {\r\n    for (const tile of tilesMap.values()) {\r\n        tile.links = new Map();\r\n        for (const n of tile.multiNeighbors ? tile.multiNeighbors() : tile.neighbors()) {\r\n            if (tilesMap.has(n[1].key)) {\r\n                tile.links.set(n[0], tilesMap.get(n[1].key));\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\r\n    const angleInRadians = (angleInDegrees - ANG_4) * DEG_TO_RAD;\r\n    return {\r\n        x: centerX + (radius * Math.cos(angleInRadians)),\r\n        y: centerY + (radius * Math.sin(angleInRadians))\r\n    };\r\n}\r\nexport function describeArc(x, y, radius, startAngle, endAngle) {\r\n    const start = polarToCartesian(x, y, radius, endAngle);\r\n    const end = polarToCartesian(x, y, radius, startAngle);\r\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\r\n    return [\r\n        'M', start.x, start.y,\r\n        'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y\r\n    ].join(' ');\r\n}\r\n//# sourceMappingURL=Utils.js.map","import { toMap } from './Utils';\r\n// From http://www.redblobgames.com/grids/hexagons/\r\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\r\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\r\n// Original source: http://www.redblobgames.com/grids/hexagons/ui.js\r\nexport class Search {\r\n    constructor(start, maxMovement, maxMagnitude, blocked, available) {\r\n        this.cost = {};\r\n        this.previous = {};\r\n        this.max = 0;\r\n        const starts = start.value ? [start] : start;\r\n        this.start = starts[0];\r\n        const blockedMap = blocked ? toMap(blocked) : undefined;\r\n        const availableMap = available ? toMap(available) : undefined;\r\n        for (const s of starts) {\r\n            this.cost[s.key] = 0;\r\n            this.previous[s.key] = null;\r\n        }\r\n        const fringes = [starts];\r\n        for (let k = 0; k < maxMovement && fringes[k].length > 0; k++) {\r\n            fringes[k + 1] = [];\r\n            for (const tile of fringes[k]) {\r\n                const neighbors = tile.neighbors();\r\n                for (const dir of neighbors) {\r\n                    const neighbor = dir[1];\r\n                    if (availableMap && !availableMap.has(neighbor.key)) {\r\n                        continue;\r\n                    }\r\n                    if ((this.cost[neighbor.key] === undefined)\r\n                        && ((blockedMap && !blockedMap.has(neighbor.key)) || (!blocked))\r\n                        && neighbor.cubeLength() <= maxMagnitude) {\r\n                        this.cost[neighbor.key] = k + 1;\r\n                        this.max = Math.max(this.max, k + 1);\r\n                        this.previous[neighbor.key] = tile;\r\n                        fringes[k + 1].push(neighbor);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    path(end, max = false) {\r\n        const ends = end.value ? [end] : end;\r\n        const min = (max ? Math.max : Math.min)\r\n            .apply(null, ends.map((e) => this.cost[e.key]).filter((e) => e !== undefined));\r\n        const path = [];\r\n        let node = ends.find((e) => this.cost[e.key] === min) || null;\r\n        while (node) {\r\n            path.push(node);\r\n            node = node.equals(this.start) ? null : this.previous[node.key];\r\n        }\r\n        return path;\r\n    }\r\n}\r\n//# sourceMappingURL=Search.js.map","import { Position } from './Position';\r\nexport function rotate(grid, direction = 1) {\r\n    grid.tiles.forEach((t) => {\r\n        let d = direction;\r\n        while (d > 0) {\r\n            t.right();\r\n            d--;\r\n        }\r\n        while (d < 0) {\r\n            t.left();\r\n            d++;\r\n        }\r\n    });\r\n}\r\nexport function translate(grid, position) {\r\n    grid.tiles = grid.tiles.map((t) => grid.toTile ? grid.toTile(grid.toPoint(t).add(position)) : []);\r\n}\r\nexport function min(grid) {\r\n    const points = grid.tiles.map((t) => grid.toPoint(t));\r\n    return new Position(Math.min.apply(null, points.map((p) => p.x)), Math.min.apply(null, points.map((p) => p.y)));\r\n}\r\nexport function normalize(grid) {\r\n    const m = min(grid);\r\n    m.x = -m.x;\r\n    m.y = -m.y;\r\n    grid.tiles = grid.tiles.map((t) => grid.toTile ? grid.toTile(grid.toPoint(t).add(m)) : []);\r\n}\r\n//# sourceMappingURL=Transform.js.map","import { instance, mapped, toMap } from './Utils';\r\nexport function circle(start, N) {\r\n    return spiral(start, N, false);\r\n}\r\nexport function spiral(start, N, isSpiral = true) {\r\n    const results = [];\r\n    if (isSpiral) {\r\n        results.push(start.add(instance(start)));\r\n    }\r\n    const neighbors = start.sideNeighbors ? start.sideNeighbors() : start.neighbors();\r\n    const c = (neighbors.length === 6) ? 1 : 2;\r\n    for (let k = isSpiral ? 1 : N; k <= N; k++) {\r\n        let H = start.shift().scale(k);\r\n        for (let i = 0; i < neighbors.length; i++) {\r\n            for (let j = 0; j < k * c; j++) {\r\n                results.push(H.add(start));\r\n                H = (H.sideNeighbors ? H.sideNeighbors() : H.neighbors())[i][1];\r\n            }\r\n        }\r\n    }\r\n    return results;\r\n}\r\nexport function intersect(a, b) {\r\n    const results = [];\r\n    for (const i of a) {\r\n        for (const j of b) {\r\n            if (i.equals(j)) {\r\n                results.push(i);\r\n            }\r\n        }\r\n    }\r\n    return results;\r\n}\r\nexport function axes(a, axe, odd = false) {\r\n    const results = [];\r\n    for (const i of a) {\r\n        const v = i.value;\r\n        const l = (Math.abs(v[axe % v.length]) % 2) === 1;\r\n        if (l === odd) {\r\n            results.push(i);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nexport function border(tiles) {\r\n    const tileMap = toMap(tiles);\r\n    return tiles.filter((t) => mapped(tileMap, t.neighbors()).length < t.directions().length);\r\n}\r\nexport function outline(tiles, available) {\r\n    const map = new Map();\r\n    const tileMap = toMap(tiles);\r\n    const availableMap = available ? toMap(available) : undefined;\r\n    tiles.forEach((t) => {\r\n        const n = new Map(mapped(tileMap, t.neighbors()));\r\n        const d = new Map(t.directions());\r\n        if (n.size < d.size) {\r\n            for (const [k, v] of d) {\r\n                if (!n.has(k)) {\r\n                    const w = t.add(v);\r\n                    if (availableMap) {\r\n                        map.set(w.key, availableMap.get(w.key));\r\n                    }\r\n                    else {\r\n                        map.set(w.key, w);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return Array.from(map.values());\r\n}\r\nexport function connections(tiles) {\r\n    const c = [];\r\n    const available = toMap(tiles);\r\n    for (const t of tiles) {\r\n        const m = new Map(mapped(available, t.neighbors()));\r\n        const s = Array.from(m.keys()).filter((k) => (k > 0) && !m.has(t.opposite ? t.opposite(k) : -k));\r\n        for (const k of s) {\r\n            const l = [];\r\n            let i = t;\r\n            while (i) {\r\n                l.push(i);\r\n                i = new Map(mapped(available, i.neighbors())).get(k);\r\n            }\r\n            c.push(l);\r\n        }\r\n    }\r\n    return c;\r\n}\r\n//# sourceMappingURL=Path.js.map","export { Shape } from './Shape';\r\nexport { BrickGrid } from './BrickGrid';\r\nexport { HexagonalGrid } from './HexagonalGrid';\r\nexport { TriangularGrid } from './TriangularGrid';\r\nexport { RadialGrid } from './RadialGrid';\r\nexport { RectangularGrid } from './RectangularGrid';\r\nexport { Position } from './Position';\r\nexport { HexagonalTile } from './HexagonalTile';\r\nexport { Radial8Tile } from './Radial8Tile';\r\nexport { RadialTile } from './RadialTile';\r\nexport { Rectangular8Tile } from './Rectangular8Tile';\r\nexport { RectangularTile } from './RectangularTile';\r\nexport { TriangularTile } from './TriangularTile';\r\nexport { Float2 } from './Float2';\r\nexport { Float3 } from './Float3';\r\nexport { Integer2 } from './Integer2';\r\nexport { Integer3 } from './Integer3';\r\nexport { Search } from './Search';\r\nexport { normalize, translate, rotate } from './Transform';\r\nexport { enumerate, instance, toMap, toArray, link } from './Utils';\r\nexport { axes, intersect, circle, spiral, border, outline, connections } from './Path';\r\n//# sourceMappingURL=index.js.map"],"names":["Shape","Position"],"mappings":"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"}