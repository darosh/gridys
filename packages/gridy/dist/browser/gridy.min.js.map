{"version":3,"sources":["gridy.min.js","/source/gridy.min.js"],"names":["f","exports","module","define","g","window","global","Gridy","self","this","e","t","s","require","u","n","a","o","i","code","Error","call","l","r","length",1,"Integer2","x","y","prototype","v","distance","b","Math","floor","abs","toString","equals","p","add","scale","d","cubeLength","Float2","round","h","rx","ry","lerp","line","N","results","push","max","k","join","__extends","__","constructor","hasOwnProperty","Position","_super","apply","arguments","Rectangle","minX","maxX","minY","maxY","Bounds","boundsOfPoints","points","rectangle","bounds","grid","centers","tiles","map","tile","center","b1","vertices","b2","Integer3","z","other","HexagonalTile","shift","directions","neighbors","dir","GridShape","HexagonalGrid","orientation","shape","angle","tileTypes","radius","SQRT_3_2","toTile","evenQToCube","toPoint","cubeToEvenQ","trapezoidalShape","evenRToCube","cubeToEvenR","oddQToCube","cubeToOddQ","oddRToCube","cubeToOddR","hexagonalShape","triangularShape","twoAxisToCube","cubeToTwoAxis","position","minQ","maxQ","minR","maxR","toCube","hexes","q","size","region","xmin","xmax","ymin","ymax","zmin","zmax","min","PI","cos","sin","SQRT_3","SQRT_3_3","sqrt","BrickGrid","cube","Constants","Float3","rz","x_diff","y_diff","z_diff","Grids","RectangularGrid","TriangularGrid","Utils","newInstance","obj","enumerate","result","keys","Object","value","parseInt","look","items","forEach","Path","spiral","start","c","H","j","intersect","axes","axe","odd","RectangularTile","px","py","SQRT_2","Search","maxMovement","maxMagnitude","blocked","available","_this","cost","previous","fringes","neighbor","undefined","path","end","node","TriangularTile","rhombus","triangle","tileType","getTileType"],"mappings":"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","file":"gridy.min.js","sourcesContent":["!function(t){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=t();else if(\"function\"==typeof define&&define.amd)define([],t);else{var n;n=\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this,n.Gridy=t()}}(function(){return function t(n,r,i){function o(a,s){if(!r[a]){if(!n[a]){var u=\"function\"==typeof require&&require;if(!s&&u)return u(a,!0);if(e)return e(a,!0);var h=new Error(\"Cannot find module '\"+a+\"'\");throw h.code=\"MODULE_NOT_FOUND\",h}var c=r[a]={exports:{}};n[a][0].call(c.exports,function(t){var r=n[a][1][t];return o(r?r:t)},c,c.exports,t,n,r,i)}return r[a].exports}for(var e=\"function\"==typeof require&&require,a=0;a<i.length;a++)o(i[a]);return o}({1:[function(t,n,r){var i;!function(t){\"use strict\"}(i||(i={}));var i;!function(t){\"use strict\"}(i||(i={}));var i;!function(t){\"use strict\"}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function t(t,n){void 0===t&&(t=0),void 0===n&&(n=0),this.x=t,this.y=n}return t.prototype.v=function(){return[this.x,this.y]},t.prototype.distance=function(t){return Math.floor((Math.abs(this.x-t.x)+Math.abs(this.y-t.y))/2)},t.prototype.toString=function(){return this.x+\",\"+this.y},t.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},t.prototype.add=function(n){return new t(this.x+n.x,this.y+n.y)},t.prototype.scale=function(n){return new t(this.x*n,this.y*n)},t.prototype.cubeLength=function(){return Math.floor((Math.abs(this.x)+Math.abs(this.y))/2)},t}();t.Integer2=n}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function n(t,n){void 0===t&&(t=0),void 0===n&&(n=0),this.x=t,this.y=n}return n.round=function(n){var r=Math.round(n.x),i=Math.round(n.y);return new t.Integer2(r,i)},n.lerp=function(t,r,i){return new n(t.x+(r.x-t.x)*i,t.y+(r.y-t.y)*i)},n.line=function(t,r){for(var i=t.distance(r),o=[],e=0;i+1>e;e++)o.push(n.round(n.lerp(t,r,1/Math.max(1,i)*e)));return o},n.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},n.prototype.v=function(){return[this.x,this.y]},n.prototype.scale=function(t){return new n(this.x*t,this.y*t)},n.prototype.toString=function(){return this.v().join(\",\")},n}();t.Float2=n}(i||(i={}));var i,o=this.__extends||function(t,n){function r(){this.constructor=t}for(var i in n)n.hasOwnProperty(i)&&(t[i]=n[i]);r.prototype=n.prototype,t.prototype=new r};!function(t){\"use strict\";var n=function(t){function n(){t.apply(this,arguments)}return o(n,t),n}(t.Integer2);t.Position=n}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function t(t,n,r,i){void 0===t&&(t=0),void 0===n&&(n=0),void 0===r&&(r=0),void 0===i&&(i=0),this.minX=0,this.maxX=0,this.minY=0,this.maxY=0,this.minX=t,this.maxX=n,this.minY=r,this.maxY=i}return t.add=function(n,r){return new t(n.minX+r.minX,n.maxX+r.maxX,n.minY+r.minY,n.maxY+r.maxY)},t}();t.Rectangle=n}(i||(i={}));var i;!function(t){\"use strict\"}(i||(i={}));var i;!function(t){\"use strict\"}(i||(i={}));var i;!function(t){\"use strict\";var n;!function(n){function r(n){for(var r=new t.Rectangle,i=0;i<n.length;i++){var o=n[i];o.x<r.minX&&(r.minX=o.x),o.x>r.maxX&&(r.maxX=o.x),o.y<r.minY&&(r.minY=o.y),o.y>r.maxY&&(r.maxY=o.y)}return r}function i(n){var i=n.tiles.map(function(t){return n.center(t)}),o=r(n.vertices()),e=r(i);return t.Rectangle.add(o,e)}n.bounds=i}(n=t.Bounds||(t.Bounds={}))}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function t(t,n,r){void 0===t&&(t=0),void 0===n&&(n=0),void 0===r&&(r=0),this.x=t,this.y=n,this.z=r}return t.prototype.distance=function(t){return Math.floor((Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z))/2)},t.prototype.add=function(n){return new t(this.x+n.x,this.y+n.y,this.z+n.z)},t.prototype.scale=function(n){return new t(this.x*n,this.y*n,this.z*n)},t.prototype.toString=function(){return this.v().join(\",\")},t.prototype.v=function(){return[this.x,this.y,this.z]},t.prototype.equals=function(t){return this.x===t.x&&this.y===t.y&&this.z===t.z},t.prototype.round=function(){return new t(Math.round(this.x),Math.round(this.y),Math.round(this.z))},t.prototype.cubeLength=function(){return Math.floor((Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z))/2)},t}();t.Integer3=n}(i||(i={}));var i;!function(t){\"use strict\";var n=function(t){function n(){t.apply(this,arguments)}return o(n,t),n.prototype.shift=function(){return n.directions[4]},n.prototype.directions=function(){return n.directions},n.prototype.add=function(r){var i=t.prototype.add.call(this,r);return new n(i.x,i.y,i.z)},n.prototype.scale=function(r){var i=t.prototype.scale.call(this,r);return new n(i.x,i.y,i.z)},n.prototype.neighbors=function(){for(var t=[],r=0;6>r;r++)t.push(this.add(n.directions[r]));return t},n.directions=[new n(1,-1,0),new n(1,0,-1),new n(0,1,-1),new n(-1,1,0),new n(-1,0,1),new n(0,-1,1)],n}(t.Integer3);t.HexagonalTile=n}(i||(i={}));var i;!function(t){\"use strict\";!function(t){t[t.TrapezoidalEven=0]=\"TrapezoidalEven\",t[t.TrapezoidalOdd=1]=\"TrapezoidalOdd\",t[t.Hexagonal=2]=\"Hexagonal\",t[t.Triangular=3]=\"Triangular\",t[t.Rhombus=4]=\"Rhombus\"}(t.GridShape||(t.GridShape={}));t.GridShape}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function n(t,r,i,o,e){void 0===e&&(e=null),this.angle=-30,this.tileTypes=1,this.scale=t,this.radius=n.SQRT_3_2*t/2,this.orientation=r,this.x=o,this.y=e,this.shape=i,0===i&&r===!1?(this.toTile=n.evenQToCube,this.toPoint=n.cubeToEvenQ,this.tiles=n.trapezoidalShape(0,o,0,e,this.toTile)):0===i&&r===!0?(this.toTile=n.evenRToCube,this.toPoint=n.cubeToEvenR,this.tiles=n.trapezoidalShape(0,o,0,e,this.toTile)):1===i&&r===!1?(this.toTile=n.oddQToCube,this.toPoint=n.cubeToOddQ,this.tiles=n.trapezoidalShape(0,o,0,e,this.toTile)):1===i&&r===!0?(this.toTile=n.oddRToCube,this.toPoint=n.cubeToOddR,this.tiles=n.trapezoidalShape(0,o,0,e,this.toTile)):2===i?(this.toTile=n.evenQToCube,this.toPoint=n.cubeToEvenQ,this.tiles=n.hexagonalShape(o)):3===i?(this.toTile=n.evenQToCube,this.toPoint=n.cubeToEvenQ,this.tiles=n.triangularShape(o)):4===i&&(this.toTile=n.twoAxisToCube,this.toPoint=n.cubeToTwoAxis,this.tiles=n.trapezoidalShape(0,o,0,e,this.toTile))}return n.twoAxisToCube=function(n){return new t.HexagonalTile(n.x,-n.y-n.x,n.y)},n.cubeToTwoAxis=function(n){return new t.Position(Math.floor(n.x),Math.floor(n.z))},n.oddQToCube=function(n){var r=n.x,i=n.y-(n.x-(1&n.x)>>1);return new t.HexagonalTile(r,-r-i,i)},n.cubeToOddQ=function(n){var r=Math.floor(n.x),i=Math.floor(n.z);return new t.Position(r,i+(r-(1&r)>>1))},n.evenQToCube=function(n){var r=n.x,i=n.y-(n.x+(1&n.x)>>1);return new t.HexagonalTile(r,-r-i,i)},n.cubeToEvenQ=function(n){var r=Math.floor(n.x),i=Math.floor(n.z);return new t.Position(r,i+(r+(1&r)>>1))},n.oddRToCube=function(n){var r=n.y,i=n.x-(n.y-(1&n.y)>>1);return new t.HexagonalTile(i,-i-r,r)},n.cubeToOddR=function(n){var r=Math.floor(n.x),i=Math.floor(n.z);return new t.Position(r+(i-(1&i)>>1),i)},n.evenRToCube=function(n){var r=n.y,i=n.x-(n.y+(1&n.y)>>1);return new t.HexagonalTile(i,-i-r,r)},n.cubeToEvenR=function(n){var r=Math.floor(n.x),i=Math.floor(n.z);return new t.Position(r+(i+(1&i)>>1),i)},n.trapezoidalShape=function(n,r,i,o,e){for(var a=[],s=n;r>s;s++)for(var u=i;o>u;u++)a.push(e(new t.Position(s,u)));return a},n.triangularShape=function(n){for(var r=[],i=0;n>i;i++)for(var o=0;i+1>o;o++)r.push(new t.HexagonalTile(o,-i,i-o));return r},n.hexagonalShape=function(n){for(var r=[],i=-n;n>i;i++)for(var o=-n;n>o;o++){var e=-i-o;Math.abs(i)<n&&Math.abs(o)<n&&Math.abs(e)<n&&r.push(new t.HexagonalTile(i,o,e))}return r},n.region=function(n,r,i,o,e,a){for(var s=[],u=n;r>=u;u++)for(var h=Math.max(i,-u-a);h<=Math.min(o,-u-e);h++){var c=-u-h;s.push(new t.HexagonalTile(u,h,c))}return s},n.prototype.bounds=function(){return t.Bounds.bounds(this)},n.prototype.vertices=function(n,r){void 0===n&&(n=null),void 0===r&&(r=null);var i=[];n=null===n?!1:this.orientation,r=null===r?this.scale:r;for(var o=0;6>o;o++){var e=2*Math.PI*(2*o-(n?1:0))/12;i.push(new t.Float2(.5*r*Math.cos(e),.5*r*Math.sin(e)))}return i},n.prototype.center=function(r){var i,o=this.scale/2;return i=this.orientation?new t.Float2(n.SQRT_3*r.x+n.SQRT_3_2*r.z,1.5*r.z):new t.Float2(1.5*r.x,n.SQRT_3_2*r.x+n.SQRT_3*r.z),i.scale(o)},n.prototype.position=function(r){var i=this.scale/2;r=r.scale(1/i);var o,e;return this.orientation?(o=n.SQRT_3_3*r.x+-1/3*r.y,e=2/3*r.y,new t.HexagonalTile(Math.round(o),Math.round(-o-e),Math.round(e))):(o=2/3*r.x,e=-1/3*r.x+n.SQRT_3_3*r.y,new t.HexagonalTile(Math.round(o),Math.round(-o-e),Math.round(e)))},n.SQRT_3=Math.sqrt(3),n.SQRT_3_2=Math.sqrt(3)/2,n.SQRT_3_3=Math.sqrt(3)/3,n}();t.HexagonalGrid=n}(i||(i={}));var i;!function(t){\"use strict\";var n=function(n){function r(t,r,i,o,e){void 0===e&&(e=null),n.call(this,t,r,i,o,e),this.angle=0,this.radius=Math.sqrt(2)/4*t}return o(r,n),r.prototype.vertices=function(n,r){void 0===n&&(n=null),void 0===r&&(r=null);var i=[];r=null===r?this.scale:r;for(var o=0;4>o;o++){var e=2*Math.PI*(2*o-1)/8;i.push(new t.Float2(.5*r*Math.cos(e),.5*r*Math.sin(e)))}return i},r.prototype.center=function(n){var r,i=this.scale/2;return r=this.orientation?new t.Float2(Math.sqrt(2)*n.x+Math.sqrt(2)/2*n.z,Math.sqrt(2)*n.z):new t.Float2(Math.sqrt(2)*n.x,Math.sqrt(2)/2*n.x+Math.sqrt(2)*n.z),r.scale(i)},r}(t.HexagonalGrid);t.BrickGrid=n}(i||(i={}));var i;!function(t){\"use strict\";var n;!function(t){t.SQRT_3=Math.sqrt(3),t.SQRT_3_2=Math.sqrt(3)/2,t.SQRT_3_3=Math.sqrt(3)/3}(n=t.Constants||(t.Constants={}))}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function n(t,n,r){this.x=t,this.y=n,this.z=r}return n.round=function(n){var r=Math.round(n.x),i=Math.round(n.y),o=Math.round(n.z),e=Math.abs(r-n.x),a=Math.abs(i-n.y),s=Math.abs(o-n.z);return e>a&&e>s?r=-i-o:a>s?i=-r-o:o=-r-i,new t.Integer3(r,i,o)},n.lerp=function(t,r,i){return new n(t.x+(r.x-t.x)*i,t.y+(r.y-t.y)*i,t.z+(r.z-t.z)*i)},n.line=function(t,r){for(var i=t.distance(r),o=[],e=0;i+1>e;e++)o.push(n.round(n.lerp(t,r,1/Math.max(1,i)*e)));return o},n.prototype.equals=function(t){return this.x===t.x&&this.y===t.y&&this.z===t.z},n.prototype.v=function(){return[this.x,this.y,this.z]},n.prototype.toString=function(){return\"#{\"+this.v().join(\",\")+\"}\"},n.prototype.round=function(){return n.round(this)},n}();t.Float3=n}(i||(i={}));var i;!function(t){\"use strict\";var n;!function(t){t.HexagonalGrid=t.HexagonalGrid,t.RectangularGrid=t.RectangularGrid,t.BrickGrid=t.BrickGrid,t.TriangularGrid=t.TriangularGrid}(n=t.Grids||(t.Grids={}))}(i||(i={}));var i;!function(t){\"use strict\";var n;!function(t){function n(t){var n={};return t.constructor.apply(n),n}function r(t){for(var n={},r=Object.keys(t),i=0;i<r.length;i++){var o=parseInt(r[i],10);o>=0&&(n[t[r[i]]]=o)}return n}function i(t){var n={};return t.forEach(function(t){n[t.toString()]=!0}),n}t.newInstance=n,t.enumerate=r,t.look=i}(n=t.Utils||(t.Utils={}))}(i||(i={}));var i;!function(t){\"use strict\";var n;!function(n){function r(n,r,i){var o=[];i&&o.push(n.add(t.Utils.newInstance(n)));for(var e=n.neighbors(),a=6===e.length?1:2,s=i?1:r;r>=s;s++)for(var u=n.shift().scale(s),h=0;h<e.length;h++)for(var c=0;s*a>c;c++)o.push(u.add(n)),u=u.neighbors()[h];return o}function i(t,n){for(var r=[],i=0;i<t.length;i++)for(var o=0;o<n.length;o++)t[i].equals(n[o])&&r.push(t[i]);return r}function o(t,n,r){void 0===r&&(r=!1);for(var i=[],o=0;o<t.length;o++){var e=t[o].v(),a=Math.abs(e[n%e.length])%2===1;a===r&&i.push(t[o])}return i}n.spiral=r,n.intersect=i,n.axes=o}(n=t.Path||(t.Path={}))}(i||(i={}));var i;!function(t){\"use strict\";var n=function(t){function n(){t.apply(this,arguments)}return o(n,t),n.prototype.shift=function(){return new n(-1,1)},n.prototype.directions=function(){return n.directions},n.prototype.add=function(r){var i=t.prototype.add.call(this,r);return new n(i.x,i.y)},n.prototype.scale=function(r){var i=t.prototype.scale.call(this,r);return new n(i.x,i.y)},n.prototype.neighbors=function(){for(var t=[],r=0;r<n.directions.length;r++)t.push(this.add(n.directions[r]));return t},n.directions=[new n(0,-1),new n(1,0),new n(0,1),new n(-1,0)],n}(t.Integer2);t.RectangularTile=n}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function n(n,r,i,o,e){void 0===e&&(e=null),this.angle=-45,this.tileTypes=1,this.scale=n,this.radius=n/2,this.orientation=r,this.x=o,this.y=e;for(var a=[],s=0;o>s;s++)for(var u=0;e>u;u++)a.push(new t.RectangularTile(s,u));this.tiles=a,this.toTile=function(n){return new t.RectangularTile(n.x,n.y)},this.toPoint=function(n){return new t.Position(n.x,n.y)}}return n.prototype.bounds=function(){return t.Bounds.bounds(this)},n.prototype.center=function(r){return this.orientation?new t.Float2(r.x*this.scale/n.SQRT_2+r.y*this.scale/n.SQRT_2,r.y*this.scale/n.SQRT_2-r.x*this.scale/n.SQRT_2):new t.Float2(r.x*this.scale,r.y*this.scale)},n.prototype.vertices=function(r,i){void 0===r&&(r=null),void 0===i&&(i=null);var o=[];return r=null===r?!1:this.orientation,i=null===i?this.scale:i,r?(i*=n.SQRT_2,o.push(new t.Float2(-i/2,0)),o.push(new t.Float2(0,-i/2)),o.push(new t.Float2(i/2,0)),o.push(new t.Float2(0,i/2))):(o.push(new t.Float2(-i/2,-i/2)),o.push(new t.Float2(-i/2,i/2)),o.push(new t.Float2(i/2,i/2)),o.push(new t.Float2(i/2,-i/2))),o},n.prototype.position=function(n){return new t.RectangularTile(Math.round(n.x),Math.round(n.y))},n.SQRT_2=Math.sqrt(2),n}();t.RectangularGrid=n}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function t(t,n,r,i,o){var e=this;void 0===o&&(o=null),this.cost={},this.previous={},this.max=0,this.start=t,this.cost[t.toString()]=0,this.previous[t.toString()]=null;for(var a=[[t]],s=0;n>s&&a[s].length>0;s++)a[s+1]=[],a[s].forEach(function(t){for(var n=t.neighbors(),u=0;u<n.length;u++){var h=n[u];(!o||o[h.toString()])&&void 0===e.cost[h.toString()]&&!i[h.toString()]&&h.cubeLength()<=r&&(e.cost[h.toString()]=s+1,e.max=Math.max(e.max,s+1),e.previous[h.toString()]=t,a[s+1].push(h))}})}return t.prototype.path=function(t){for(var n=[],r=t;r;)n.push(r),r=r.equals(this.start)?null:this.previous[r.toString()];return n},t}();t.Search=n}(i||(i={}));var i;!function(t){\"use strict\";var n=function(t){function n(n,r,i){void 0===n&&(n=0),void 0===r&&(r=0),void 0===i&&(i=!1),t.call(this,n,r),this.s=i}return o(n,t),n.prototype.v=function(){return[this.x,this.y,this.s]},n.prototype.toString=function(){return this.v().join(\",\")},n.prototype.shift=function(){return n.directions[0]},n.prototype.directions=function(){return n.directions},n.prototype.add=function(r){var i=t.prototype.add.call(this,r);return new n(i.x,i.y)},n.prototype.scale=function(r){var i=t.prototype.scale.call(this,r);return new n(i.x,i.y)},n.prototype.neighbors=function(){for(var t=[],r=0;3>r;r++)t.push(this.add(n.directions[r]));return t},n.directions=[new n(0,0,!0),new n(-1,0,!1),new n(0,-1,!1)],n}(t.Integer2);t.TriangularTile=n}(i||(i={}));var i;!function(t){\"use strict\";var n=function(){function n(n,r,i,o,e){void 0===e&&(e=null),this.angle=-60,this.tileTypes=2,this.scale=n,this.radius=Math.sqrt(3)/6*n,this.orientation=r,this.x=o,this.y=e,4===i?(this.tiles=this.rhombus(),this.orientation=!1):2===i?(this.tiles=this.hexagonalShape(o),this.orientation=!1):(this.tiles=this.triangle(),this.orientation=!1),this.toPoint=function(n){return new t.Position(2*n.x+(n.s?1:0),n.y)}}return n.prototype.bounds=function(){return t.Bounds.bounds(this)},n.prototype.center=function(n){return new t.Float2((2*n.x+(n.s?1:0)+n.y)*this.scale/2,this.scale*(n.y*(Math.sqrt(3)/2)+(n.s?0:-(Math.sqrt(3)/6))))},n.prototype.vertices=function(n,r,i){return void 0===i&&(i=0),0===i?[new t.Float2(0,-this.scale*Math.sqrt(3)/3),new t.Float2(-this.scale/2,this.scale*Math.sqrt(3)/6),new t.Float2(this.scale/2,this.scale*Math.sqrt(3)/6)]:[new t.Float2(0,this.scale*(Math.sqrt(3)/6+Math.sqrt(3)/6)),new t.Float2(-this.scale/2,-this.scale*(Math.sqrt(3)/3-Math.sqrt(3)/6)),new t.Float2(this.scale/2,-this.scale*(Math.sqrt(3)/3-Math.sqrt(3)/6))]},n.prototype.position=function(n){return new t.TriangularTile(Math.round(n.x),Math.round(n.y),!1)},n.prototype.getTileType=function(t){return t.s?0:1},n.prototype.rhombus=function(){for(var n=[],r=0;r<this.x;r++)for(var i=0;i<this.y;i++)n.push(new t.TriangularTile(r,i,!1)),n.push(new t.TriangularTile(r,i,!0));return n},n.prototype.triangle=function(){for(var n=[],r=0;r<this.x;r++)for(var i=0;i<this.x-r;i++)n.push(new t.TriangularTile(i,r,!1)),i<this.x-r-1&&n.push(new t.TriangularTile(i,r,!0));return n},n.prototype.hexagonalShape=function(n){for(var r=[],i=-n;n>i;i++)for(var o=-n;n>o;o++)Math.abs(-i-o)<=n&&n>i+o&&r.push(new t.TriangularTile(i,o,!1)),Math.abs(-i-o)-1<=n&&n>i+o+1&&r.push(new t.TriangularTile(i,o,!0));return r},n}();t.TriangularGrid=n}(i||(i={})),n.exports=i},{}]},{},[1])(1)});\n//# sourceMappingURL=gridy.min.js.map","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Gridy = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n})(Gridy || (Gridy = {}));\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n})(Gridy || (Gridy = {}));\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n})(Gridy || (Gridy = {}));\n/// <reference path=\"IVector.ts\" />\n/// <reference path=\"Integer.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Integer2 = (function () {\n        function Integer2(x, y) {\n            if (x === void 0) { x = 0; }\n            if (y === void 0) { y = 0; }\n            this.x = x;\n            this.y = y;\n        }\n        Integer2.prototype.v = function () {\n            return [this.x, this.y];\n        };\n        Integer2.prototype.distance = function (b) {\n            return Math.floor((Math.abs(this.x - b.x) + Math.abs(this.y - b.y)) / 2);\n        };\n        Integer2.prototype.toString = function () {\n            return this.x + ',' + this.y;\n        };\n        Integer2.prototype.equals = function (p) {\n            return (this.x === p.x) && (this.y === p.y);\n        };\n        Integer2.prototype.add = function (p) {\n            return new Integer2(this.x + p.x, this.y + p.y);\n        };\n        Integer2.prototype.scale = function (d) {\n            return new Integer2(this.x * d, this.y * d);\n        };\n        Integer2.prototype.cubeLength = function () {\n            return Math.floor((Math.abs(this.x) + Math.abs(this.y)) / 2);\n        };\n        return Integer2;\n    })();\n    Gridy.Integer2 = Integer2;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"IVector.ts\" />\n/// <reference path=\"Integer.ts\" />\n/// <reference path=\"Integer2.ts\" />\n/// <reference path=\"Float.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Float2 = (function () {\n        function Float2(x, y) {\n            if (x === void 0) { x = 0; }\n            if (y === void 0) { y = 0; }\n            this.x = x;\n            this.y = y;\n        }\n        Float2.round = function (h) {\n            var rx = Math.round(h.x);\n            var ry = Math.round(h.y);\n            return new Gridy.Integer2(rx, ry);\n        };\n        Float2.lerp = function (a, b, t) {\n            return new Float2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t);\n        };\n        Float2.line = function (a, b) {\n            var N = a.distance(b);\n            var results = [];\n            for (var i = 0; i < (N + 1); i++) {\n                results.push(Float2.round(Float2.lerp(a, b, 1.0 / Math.max(1, N) * i)));\n            }\n            return results;\n        };\n        Float2.prototype.equals = function (p) {\n            return (this.x === p.x) && (this.y === p.y);\n        };\n        Float2.prototype.v = function () {\n            return [this.x, this.y];\n        };\n        Float2.prototype.scale = function (k) {\n            return new Float2(this.x * k, this.y * k);\n        };\n        Float2.prototype.toString = function () {\n            return this.v().join(',');\n        };\n        return Float2;\n    })();\n    Gridy.Float2 = Float2;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"Integer2.ts\" />\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Position = (function (_super) {\n        __extends(Position, _super);\n        function Position() {\n            _super.apply(this, arguments);\n        }\n        return Position;\n    })(Gridy.Integer2);\n    Gridy.Position = Position;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"Float.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Rectangle = (function () {\n        function Rectangle(minX, maxX, minY, maxY) {\n            if (minX === void 0) { minX = 0; }\n            if (maxX === void 0) { maxX = 0; }\n            if (minY === void 0) { minY = 0; }\n            if (maxY === void 0) { maxY = 0; }\n            this.minX = 0;\n            this.maxX = 0;\n            this.minY = 0;\n            this.maxY = 0;\n            this.minX = minX;\n            this.maxX = maxX;\n            this.minY = minY;\n            this.maxY = maxY;\n        }\n        Rectangle.add = function (a, b) {\n            return new Rectangle(a.minX + b.minX, a.maxX + b.maxX, a.minY + b.minY, a.maxY + b.maxY);\n        };\n        return Rectangle;\n    })();\n    Gridy.Rectangle = Rectangle;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"Integer.ts\" />\n/// <reference path=\"Float.ts\" />\n/// <reference path=\"Float2.ts\" />\n/// <reference path=\"Position.ts\" />\n/// <reference path=\"Rectangle.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n})(Gridy || (Gridy = {}));\n/// <reference path=\"Integer.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n})(Gridy || (Gridy = {}));\n// From http://www.redblobgames.com/grids/hexagons/\n// Copyright 2012 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n// Original source: http://www.redblobgames.com/grids/hexagons/Grid.hx\n/// <reference path=\"IGrid.ts\" />\n/// <reference path=\"ITile.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Bounds;\n    (function (Bounds) {\n        function boundsOfPoints(points) {\n            var rectangle = new Gridy.Rectangle();\n            for (var i = 0; i < points.length; i++) {\n                var p = points[i];\n                if (p.x < rectangle.minX) {\n                    rectangle.minX = p.x;\n                }\n                if (p.x > rectangle.maxX) {\n                    rectangle.maxX = p.x;\n                }\n                if (p.y < rectangle.minY) {\n                    rectangle.minY = p.y;\n                }\n                if (p.y > rectangle.maxY) {\n                    rectangle.maxY = p.y;\n                }\n            }\n            return rectangle;\n        }\n        function bounds(grid) {\n            var centers = grid.tiles.map(function (tile) {\n                return grid.center(tile);\n            });\n            // TODO use vertices(..,...,tileType) for TriangularGrid;\n            var b1 = boundsOfPoints(grid.vertices());\n            var b2 = boundsOfPoints(centers);\n            return Gridy.Rectangle.add(b1, b2);\n        }\n        Bounds.bounds = bounds;\n    })(Bounds = Gridy.Bounds || (Gridy.Bounds = {}));\n})(Gridy || (Gridy = {}));\n/// <reference path=\"IVector.ts\" />\n/// <reference path=\"Integer.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Integer3 = (function () {\n        function Integer3(x, y, z) {\n            if (x === void 0) { x = 0; }\n            if (y === void 0) { y = 0; }\n            if (z === void 0) { z = 0; }\n            this.x = x;\n            this.y = y;\n            this.z = z;\n        }\n        Integer3.prototype.distance = function (b) {\n            return Math.floor((Math.abs(this.x - b.x) + Math.abs(this.y - b.y) + Math.abs(this.z - b.z)) / 2);\n        };\n        Integer3.prototype.add = function (b) {\n            return new Integer3(this.x + b.x, this.y + b.y, this.z + b.z);\n        };\n        Integer3.prototype.scale = function (k) {\n            return new Integer3(this.x * k, this.y * k, this.z * k);\n        };\n        Integer3.prototype.toString = function () {\n            return this.v().join(',');\n        };\n        Integer3.prototype.v = function () {\n            return [this.x, this.y, this.z];\n        };\n        Integer3.prototype.equals = function (other) {\n            return (this.x === other.x) && (this.y === other.y) && (this.z === other.z);\n        };\n        Integer3.prototype.round = function () {\n            return new Integer3(Math.round(this.x), Math.round(this.y), Math.round(this.z));\n        };\n        Integer3.prototype.cubeLength = function () {\n            return Math.floor((Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)) / 2);\n        };\n        return Integer3;\n    })();\n    Gridy.Integer3 = Integer3;\n})(Gridy || (Gridy = {}));\n// From http://www.redblobgames.com/grids/hexagons/\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n// Original source: http://www.redblobgames.com/grids/hexagons/Cube.hx\n/// <reference path=\"Integer3.ts\" />\n/// <reference path=\"ITile.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var HexagonalTile = (function (_super) {\n        __extends(HexagonalTile, _super);\n        function HexagonalTile() {\n            _super.apply(this, arguments);\n        }\n        HexagonalTile.prototype.shift = function () {\n            return HexagonalTile.directions[4];\n        };\n        HexagonalTile.prototype.directions = function () {\n            return HexagonalTile.directions;\n        };\n        HexagonalTile.prototype.add = function (a) {\n            var r = _super.prototype.add.call(this, a);\n            return new HexagonalTile(r.x, r.y, r.z);\n        };\n        HexagonalTile.prototype.scale = function (a) {\n            var r = _super.prototype.scale.call(this, a);\n            return new HexagonalTile(r.x, r.y, r.z);\n        };\n        HexagonalTile.prototype.neighbors = function () {\n            var results = [];\n            for (var dir = 0; dir < 6; dir++) {\n                results.push(this.add(HexagonalTile.directions[dir]));\n            }\n            return results;\n        };\n        HexagonalTile.directions = [\n            new HexagonalTile(1, -1, 0),\n            new HexagonalTile(1, 0, -1),\n            new HexagonalTile(0, 1, -1),\n            new HexagonalTile(-1, 1, 0),\n            new HexagonalTile(-1, 0, 1),\n            new HexagonalTile(0, -1, 1)\n        ];\n        return HexagonalTile;\n    })(Gridy.Integer3);\n    Gridy.HexagonalTile = HexagonalTile;\n})(Gridy || (Gridy = {}));\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    (function (GridShape) {\n        GridShape[GridShape[\"TrapezoidalEven\"] = 0] = \"TrapezoidalEven\";\n        GridShape[GridShape[\"TrapezoidalOdd\"] = 1] = \"TrapezoidalOdd\";\n        GridShape[GridShape[\"Hexagonal\"] = 2] = \"Hexagonal\";\n        GridShape[GridShape[\"Triangular\"] = 3] = \"Triangular\";\n        GridShape[GridShape[\"Rhombus\"] = 4] = \"Rhombus\";\n    })(Gridy.GridShape || (Gridy.GridShape = {}));\n    var GridShape = Gridy.GridShape;\n})(Gridy || (Gridy = {}));\n// From http://www.redblobgames.com/grids/hexagons/\n// Copyright 2012 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n// Original source: http://www.redblobgames.com/grids/hexagons/Grid.hx\n/// <reference path=\"IGrid.ts\" />\n/// <reference path=\"HexagonalTile.ts\" />\n/// <reference path=\"GridShape.ts\" />\n/// <reference path=\"Position.ts\" />\n/// <reference path=\"Bounds.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var HexagonalGrid = (function () {\n        function HexagonalGrid(scale, orientation, shape, x, y) {\n            if (y === void 0) { y = null; }\n            this.angle = -30;\n            this.tileTypes = 1;\n            this.scale = scale;\n            this.radius = HexagonalGrid.SQRT_3_2 * scale / 2;\n            this.orientation = orientation;\n            this.x = x;\n            this.y = y;\n            this.shape = shape;\n            if (shape === 0 /* TrapezoidalEven */ && orientation === false) {\n                this.toTile = HexagonalGrid.evenQToCube;\n                this.toPoint = HexagonalGrid.cubeToEvenQ;\n                this.tiles = HexagonalGrid.trapezoidalShape(0, x, 0, y, this.toTile);\n            }\n            else if (shape === 0 /* TrapezoidalEven */ && orientation === true) {\n                this.toTile = HexagonalGrid.evenRToCube;\n                this.toPoint = HexagonalGrid.cubeToEvenR;\n                this.tiles = HexagonalGrid.trapezoidalShape(0, x, 0, y, this.toTile);\n            }\n            else if (shape === 1 /* TrapezoidalOdd */ && orientation === false) {\n                this.toTile = HexagonalGrid.oddQToCube;\n                this.toPoint = HexagonalGrid.cubeToOddQ;\n                this.tiles = HexagonalGrid.trapezoidalShape(0, x, 0, y, this.toTile);\n            }\n            else if (shape === 1 /* TrapezoidalOdd */ && orientation === true) {\n                this.toTile = HexagonalGrid.oddRToCube;\n                this.toPoint = HexagonalGrid.cubeToOddR;\n                this.tiles = HexagonalGrid.trapezoidalShape(0, x, 0, y, this.toTile);\n            }\n            else if (shape === 2 /* Hexagonal */) {\n                this.toTile = HexagonalGrid.evenQToCube;\n                this.toPoint = HexagonalGrid.cubeToEvenQ;\n                this.tiles = HexagonalGrid.hexagonalShape(x);\n            }\n            else if (shape === 3 /* Triangular */) {\n                this.toTile = HexagonalGrid.evenQToCube;\n                this.toPoint = HexagonalGrid.cubeToEvenQ;\n                this.tiles = HexagonalGrid.triangularShape(x);\n            }\n            else if (shape === 4 /* Rhombus */) {\n                this.toTile = HexagonalGrid.twoAxisToCube;\n                this.toPoint = HexagonalGrid.cubeToTwoAxis;\n                this.tiles = HexagonalGrid.trapezoidalShape(0, x, 0, y, this.toTile);\n            }\n        }\n        HexagonalGrid.twoAxisToCube = function (position) {\n            return new Gridy.HexagonalTile(position.x, -position.y - position.x, position.y);\n        };\n        HexagonalGrid.cubeToTwoAxis = function (tile) {\n            return new Gridy.Position(Math.floor(tile.x), Math.floor(tile.z));\n        };\n        HexagonalGrid.oddQToCube = function (position) {\n            /* tslint:disable:no-bitwise */\n            var x = position.x, z = position.y - ((position.x - (position.x & 1)) >> 1);\n            /* tslint:enable:no-bitwise */\n            return new Gridy.HexagonalTile(x, -x - z, z);\n        };\n        HexagonalGrid.cubeToOddQ = function (tile) {\n            var x = Math.floor(tile.x), z = Math.floor(tile.z);\n            /* tslint:disable:no-bitwise */\n            return new Gridy.Position(x, z + ((x - (x & 1)) >> 1));\n            /* tslint:enable:no-bitwise */\n        };\n        HexagonalGrid.evenQToCube = function (position) {\n            /* tslint:disable:no-bitwise */\n            var x = position.x, z = position.y - ((position.x + (position.x & 1)) >> 1);\n            /* tslint:enable:no-bitwise */\n            return new Gridy.HexagonalTile(x, -x - z, z);\n        };\n        HexagonalGrid.cubeToEvenQ = function (tile) {\n            var x = Math.floor(tile.x), z = Math.floor(tile.z);\n            /* tslint:disable:no-bitwise */\n            return new Gridy.Position(x, z + ((x + (x & 1)) >> 1));\n            /* tslint:enable:no-bitwise */\n        };\n        HexagonalGrid.oddRToCube = function (position) {\n            /* tslint:disable:no-bitwise */\n            var z = position.y, x = position.x - ((position.y - (position.y & 1)) >> 1);\n            /* tslint:enable:no-bitwise */\n            return new Gridy.HexagonalTile(x, -x - z, z);\n        };\n        HexagonalGrid.cubeToOddR = function (tile) {\n            var x = Math.floor(tile.x), z = Math.floor(tile.z);\n            /* tslint:disable:no-bitwise */\n            return new Gridy.Position(x + ((z - (z & 1)) >> 1), z);\n            /* tslint:enable:no-bitwise */\n        };\n        HexagonalGrid.evenRToCube = function (position) {\n            /* tslint:disable:no-bitwise */\n            var z = position.y, x = position.x - ((position.y + (position.y & 1)) >> 1);\n            /* tslint:enable:no-bitwise */\n            return new Gridy.HexagonalTile(x, -x - z, z);\n        };\n        HexagonalGrid.cubeToEvenR = function (tile) {\n            var x = Math.floor(tile.x), z = Math.floor(tile.z);\n            /* tslint:disable:no-bitwise */\n            return new Gridy.Position(x + ((z + (z & 1)) >> 1), z);\n            /* tslint:enable:no-bitwise */\n        };\n        HexagonalGrid.trapezoidalShape = function (minQ, maxQ, minR, maxR, toCube) {\n            var hexes = [];\n            for (var q = minQ; q < maxQ; q++) {\n                for (var r = minR; r < maxR; r++) {\n                    hexes.push(toCube(new Gridy.Position(q, r)));\n                }\n            }\n            return hexes;\n        };\n        HexagonalGrid.triangularShape = function (size) {\n            var hexes = [];\n            for (var k = 0; k < size; k++) {\n                for (var i = 0; i < (k + 1); i++) {\n                    hexes.push(new Gridy.HexagonalTile(i, -k, k - i));\n                }\n            }\n            return hexes;\n        };\n        HexagonalGrid.hexagonalShape = function (size) {\n            var hexes = [];\n            for (var x = -size; x < size; x++) {\n                for (var y = -size; y < size; y++) {\n                    var z = -x - y;\n                    if (Math.abs(x) < size && Math.abs(y) < size && Math.abs(z) < size) {\n                        hexes.push(new Gridy.HexagonalTile(x, y, z));\n                    }\n                }\n            }\n            return hexes;\n        };\n        HexagonalGrid.region = function (xmin, xmax, ymin, ymax, zmin, zmax) {\n            var results = [];\n            for (var x = xmin; x <= xmax; x++) {\n                for (var y = Math.max(ymin, -x - zmax); y <= Math.min(ymax, -x - zmin); y++) {\n                    var z = -x - y;\n                    results.push(new Gridy.HexagonalTile(x, y, z));\n                }\n            }\n            return results;\n        };\n        HexagonalGrid.prototype.bounds = function () {\n            return Gridy.Bounds.bounds(this);\n        };\n        HexagonalGrid.prototype.vertices = function (orientation, scale) {\n            if (orientation === void 0) { orientation = null; }\n            if (scale === void 0) { scale = null; }\n            var points = [];\n            orientation = (orientation === null) ? false : this.orientation;\n            scale = (scale === null) ? this.scale : scale;\n            for (var i = 0; i < 6; i++) {\n                var angle = 2 * Math.PI * (2 * i - (orientation ? 1 : 0)) / 12;\n                points.push(new Gridy.Float2(0.5 * scale * Math.cos(angle), 0.5 * scale * Math.sin(angle)));\n            }\n            return points;\n        };\n        HexagonalGrid.prototype.center = function (tile) {\n            var s;\n            var size = this.scale / 2;\n            if (this.orientation) {\n                s = new Gridy.Float2(HexagonalGrid.SQRT_3 * tile.x + HexagonalGrid.SQRT_3_2 * tile.z, 1.5 * tile.z);\n            }\n            else {\n                s = new Gridy.Float2(1.5 * tile.x, HexagonalGrid.SQRT_3_2 * tile.x + HexagonalGrid.SQRT_3 * tile.z);\n            }\n            return s.scale(size);\n        };\n        HexagonalGrid.prototype.position = function (p) {\n            var size = this.scale / 2;\n            p = p.scale(1 / size);\n            var q, r;\n            if (this.orientation) {\n                q = HexagonalGrid.SQRT_3_3 * p.x + -1 / 3 * p.y;\n                r = 2 / 3 * p.y;\n                return new Gridy.HexagonalTile(Math.round(q), Math.round(-q - r), Math.round(r));\n            }\n            else {\n                q = 2 / 3 * p.x;\n                r = -1 / 3 * p.x + HexagonalGrid.SQRT_3_3 * p.y;\n                return new Gridy.HexagonalTile(Math.round(q), Math.round(-q - r), Math.round(r));\n            }\n        };\n        HexagonalGrid.SQRT_3 = Math.sqrt(3);\n        HexagonalGrid.SQRT_3_2 = Math.sqrt(3) / 2;\n        HexagonalGrid.SQRT_3_3 = Math.sqrt(3) / 3;\n        return HexagonalGrid;\n    })();\n    Gridy.HexagonalGrid = HexagonalGrid;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"HexagonalGrid.ts\" />\n/// <reference path=\"GridShape.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var BrickGrid = (function (_super) {\n        __extends(BrickGrid, _super);\n        function BrickGrid(scale, orientation, shape, x, y) {\n            if (y === void 0) { y = null; }\n            _super.call(this, scale, orientation, shape, x, y);\n            this.angle = 0;\n            this.radius = Math.sqrt(2) / 4 * scale;\n        }\n        BrickGrid.prototype.vertices = function (orientation, scale) {\n            if (orientation === void 0) { orientation = null; }\n            if (scale === void 0) { scale = null; }\n            var points = [];\n            scale = (scale === null) ? this.scale : scale;\n            for (var i = 0; i < 4; i++) {\n                var angle = 2 * Math.PI * (2 * i - 1) / 8;\n                points.push(new Gridy.Float2(0.5 * scale * Math.cos(angle), 0.5 * scale * Math.sin(angle)));\n            }\n            return points;\n        };\n        BrickGrid.prototype.center = function (cube) {\n            var s;\n            var size = this.scale / 2;\n            if (this.orientation) {\n                s = new Gridy.Float2(Math.sqrt(2) * cube.x + Math.sqrt(2) / 2 * cube.z, Math.sqrt(2) * cube.z);\n            }\n            else {\n                s = new Gridy.Float2(Math.sqrt(2) * cube.x, Math.sqrt(2) / 2 * cube.x + Math.sqrt(2) * cube.z);\n            }\n            return s.scale(size);\n        };\n        return BrickGrid;\n    })(Gridy.HexagonalGrid);\n    Gridy.BrickGrid = BrickGrid;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"Float.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Constants;\n    (function (Constants) {\n        'use strict';\n        Constants.SQRT_3 = Math.sqrt(3);\n        Constants.SQRT_3_2 = Math.sqrt(3) / 2;\n        Constants.SQRT_3_3 = Math.sqrt(3) / 3;\n    })(Constants = Gridy.Constants || (Gridy.Constants = {}));\n})(Gridy || (Gridy = {}));\n/// <reference path=\"IVector.ts\" />\n/// <reference path=\"Integer.ts\" />\n/// <reference path=\"Integer3.ts\" />\n/// <reference path=\"Float.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Float3 = (function () {\n        function Float3(x, y, z) {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n        }\n        Float3.round = function (h) {\n            var rx = Math.round(h.x);\n            var ry = Math.round(h.y);\n            var rz = Math.round(h.z);\n            var x_diff = Math.abs(rx - h.x);\n            var y_diff = Math.abs(ry - h.y);\n            var z_diff = Math.abs(rz - h.z);\n            if (x_diff > y_diff && x_diff > z_diff) {\n                rx = -ry - rz;\n            }\n            else if (y_diff > z_diff) {\n                ry = -rx - rz;\n            }\n            else {\n                rz = -rx - ry;\n            }\n            return new Gridy.Integer3(rx, ry, rz);\n        };\n        Float3.lerp = function (a, b, t) {\n            return new Float3(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t);\n        };\n        Float3.line = function (a, b) {\n            var N = a.distance(b);\n            var results = [];\n            for (var i = 0; i < (N + 1); i++) {\n                results.push(Float3.round(Float3.lerp(a, b, 1.0 / Math.max(1, N) * i)));\n            }\n            return results;\n        };\n        Float3.prototype.equals = function (other) {\n            return (this.x === other.x) && (this.y === other.y) && (this.z === other.z);\n        };\n        Float3.prototype.v = function () {\n            return [this.x, this.y, this.z];\n        };\n        Float3.prototype.toString = function () {\n            return '#{' + this.v().join(',') + '}';\n        };\n        Float3.prototype.round = function () {\n            return Float3.round(this);\n        };\n        return Float3;\n    })();\n    Gridy.Float3 = Float3;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"IGrid.ts\" />\n/// <reference path=\"GridShape.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Grids;\n    (function (Grids) {\n        Grids.HexagonalGrid = Grids.HexagonalGrid;\n        Grids.RectangularGrid = Grids.RectangularGrid;\n        Grids.BrickGrid = Grids.BrickGrid;\n        Grids.TriangularGrid = Grids.TriangularGrid;\n    })(Grids = Gridy.Grids || (Gridy.Grids = {}));\n})(Gridy || (Gridy = {}));\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Utils;\n    (function (Utils) {\n        function newInstance(obj) {\n            var n = {};\n            obj.constructor.apply(n);\n            return n;\n        }\n        Utils.newInstance = newInstance;\n        function enumerate(obj) {\n            var result = {};\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                var value = parseInt(keys[i], 10);\n                if (value >= 0) {\n                    result[obj[keys[i]]] = value;\n                }\n            }\n            return result;\n        }\n        Utils.enumerate = enumerate;\n        function look(items) {\n            var result = {};\n            items.forEach(function (v) {\n                result[v.toString()] = true;\n            });\n            return result;\n        }\n        Utils.look = look;\n    })(Utils = Gridy.Utils || (Gridy.Utils = {}));\n})(Gridy || (Gridy = {}));\n/// <reference path=\"ITile.ts\" />\n/// <reference path=\"Utils.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Path;\n    (function (Path) {\n        'use strict';\n        function spiral(start, N, spiral) {\n            var results = [];\n            if (spiral) {\n                results.push(start.add(Gridy.Utils.newInstance(start)));\n            }\n            var neighbors = start.neighbors();\n            var c = (neighbors.length === 6) ? 1 : 2;\n            for (var k = spiral ? 1 : N; k <= N; k++) {\n                var H = start.shift().scale(k);\n                for (var i = 0; i < neighbors.length; i++) {\n                    for (var j = 0; j < k * c; j++) {\n                        results.push(H.add(start));\n                        H = H.neighbors()[i];\n                    }\n                }\n            }\n            return results;\n        }\n        Path.spiral = spiral;\n        function intersect(a, b) {\n            var results = [];\n            for (var i = 0; i < a.length; i++) {\n                for (var j = 0; j < b.length; j++) {\n                    if (a[i].equals(b[j])) {\n                        results.push(a[i]);\n                    }\n                }\n            }\n            return results;\n        }\n        Path.intersect = intersect;\n        function axes(a, axe, odd) {\n            if (odd === void 0) { odd = false; }\n            var results = [];\n            for (var i = 0; i < a.length; i++) {\n                var v = a[i].v();\n                var l = (Math.abs(v[axe % v.length]) % 2) === 1;\n                if (l === odd) {\n                    results.push(a[i]);\n                }\n            }\n            return results;\n        }\n        Path.axes = axes;\n    })(Path = Gridy.Path || (Gridy.Path = {}));\n})(Gridy || (Gridy = {}));\n/// <reference path=\"ITile.ts\" />\n/// <reference path=\"Integer2.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var RectangularTile = (function (_super) {\n        __extends(RectangularTile, _super);\n        function RectangularTile() {\n            _super.apply(this, arguments);\n        }\n        RectangularTile.prototype.shift = function () {\n            return new RectangularTile(-1, 1);\n        };\n        RectangularTile.prototype.directions = function () {\n            return RectangularTile.directions;\n        };\n        RectangularTile.prototype.add = function (a) {\n            var r = _super.prototype.add.call(this, a);\n            return new RectangularTile(r.x, r.y);\n        };\n        RectangularTile.prototype.scale = function (a) {\n            var r = _super.prototype.scale.call(this, a);\n            return new RectangularTile(r.x, r.y);\n        };\n        RectangularTile.prototype.neighbors = function () {\n            var results = [];\n            for (var dir = 0; dir < RectangularTile.directions.length; dir++) {\n                results.push(this.add(RectangularTile.directions[dir]));\n            }\n            return results;\n        };\n        RectangularTile.directions = [\n            new RectangularTile(0, -1),\n            new RectangularTile(1, 0),\n            new RectangularTile(0, 1),\n            new RectangularTile(-1, 0)\n        ];\n        return RectangularTile;\n    })(Gridy.Integer2);\n    Gridy.RectangularTile = RectangularTile;\n})(Gridy || (Gridy = {}));\n// TypeScript version of http://www.redblobgames.com/articles/grids/hexagons/\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n/// <reference path=\"IGrid.ts\" />\n/// <reference path=\"RectangularTile.ts\" />\n/// <reference path=\"GridShape.ts\" />\n/// <reference path=\"Bounds.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var RectangularGrid = (function () {\n        function RectangularGrid(scale, orientation, shape, x, y) {\n            if (y === void 0) { y = null; }\n            this.angle = -45;\n            this.tileTypes = 1;\n            this.scale = scale;\n            this.radius = scale / 2;\n            this.orientation = orientation;\n            this.x = x;\n            this.y = y;\n            var results = [];\n            for (var px = 0; px < x; px++) {\n                for (var py = 0; py < y; py++) {\n                    results.push(new Gridy.RectangularTile(px, py));\n                }\n            }\n            this.tiles = results;\n            this.toTile = function (p) {\n                return new Gridy.RectangularTile(p.x, p.y);\n            };\n            this.toPoint = function (p) {\n                return new Gridy.Position(p.x, p.y);\n            };\n        }\n        /*\n         bounds():Rectangle {\n         if (this.orientation) {\n         return new Rectangle(\n         -this.scale * RectangularGrid.SQRT_2 / 2,\n         +this.scale * RectangularGrid.SQRT_2 / 2 + ((this.x + this.y - 2) / 2) * this.scale * RectangularGrid.SQRT_2,\n         -this.scale * RectangularGrid.SQRT_2 / 2 - (this.x / 2) * this.scale * RectangularGrid.SQRT_2,\n         +this.scale * RectangularGrid.SQRT_2 / 2 + (this.y / 2) * this.scale * RectangularGrid.SQRT_2\n         );\n         } else {\n         return new Rectangle(-0.5 * this.scale, (this.x - 0.5) * this.scale, -0.5 * this.scale, (this.y - 0.5) * this.scale);\n         }\n         }\n         */\n        RectangularGrid.prototype.bounds = function () {\n            return Gridy.Bounds.bounds(this);\n        };\n        RectangularGrid.prototype.center = function (tile) {\n            if (this.orientation) {\n                return new Gridy.Float2(tile.x * this.scale / RectangularGrid.SQRT_2 + tile.y * this.scale / RectangularGrid.SQRT_2, tile.y * this.scale / RectangularGrid.SQRT_2 - tile.x * this.scale / RectangularGrid.SQRT_2);\n            }\n            else {\n                return new Gridy.Float2(tile.x * this.scale, tile.y * this.scale);\n            }\n        };\n        RectangularGrid.prototype.vertices = function (orientation, scale) {\n            if (orientation === void 0) { orientation = null; }\n            if (scale === void 0) { scale = null; }\n            var points = [];\n            orientation = (orientation === null) ? false : this.orientation;\n            scale = (scale === null) ? this.scale : scale;\n            if (orientation) {\n                scale *= RectangularGrid.SQRT_2;\n                points.push(new Gridy.Float2(-scale / 2, 0));\n                points.push(new Gridy.Float2(0, -scale / 2));\n                points.push(new Gridy.Float2(scale / 2, 0));\n                points.push(new Gridy.Float2(0, scale / 2));\n            }\n            else {\n                points.push(new Gridy.Float2(-scale / 2, -scale / 2));\n                points.push(new Gridy.Float2(-scale / 2, scale / 2));\n                points.push(new Gridy.Float2(scale / 2, scale / 2));\n                points.push(new Gridy.Float2(scale / 2, -scale / 2));\n            }\n            return points;\n        };\n        RectangularGrid.prototype.position = function (p) {\n            return new Gridy.RectangularTile(Math.round(p.x), Math.round(p.y));\n        };\n        RectangularGrid.SQRT_2 = Math.sqrt(2);\n        return RectangularGrid;\n    })();\n    Gridy.RectangularGrid = RectangularGrid;\n})(Gridy || (Gridy = {}));\n// From http://www.redblobgames.com/grids/hexagons/\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n// Original source: http://www.redblobgames.com/grids/hexagons/ui.js\n/// <reference path=\"ITile.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var Search = (function () {\n        function Search(start, maxMovement, maxMagnitude, blocked, available) {\n            var _this = this;\n            if (available === void 0) { available = null; }\n            this.cost = {};\n            this.previous = {};\n            this.max = 0;\n            this.start = start;\n            this.cost[start.toString()] = 0;\n            this.previous[start.toString()] = null;\n            var fringes = [[start]];\n            for (var k = 0; k < maxMovement && fringes[k].length > 0; k++) {\n                fringes[k + 1] = [];\n                fringes[k].forEach(function (tile) {\n                    var neighbors = tile.neighbors();\n                    for (var dir = 0; dir < neighbors.length; dir++) {\n                        var neighbor = neighbors[dir];\n                        if (available && !available[neighbor.toString()]) {\n                            continue;\n                        }\n                        if ((_this.cost[neighbor.toString()] === undefined) && !blocked[neighbor.toString()] && neighbor.cubeLength() <= maxMagnitude) {\n                            _this.cost[neighbor.toString()] = k + 1;\n                            _this.max = Math.max(_this.max, k + 1);\n                            _this.previous[neighbor.toString()] = tile;\n                            fringes[k + 1].push(neighbor);\n                        }\n                    }\n                });\n            }\n        }\n        Search.prototype.path = function (end) {\n            var path = [];\n            var node = end;\n            while (node) {\n                path.push(node);\n                node = node.equals(this.start) ? null : this.previous[node.toString()];\n            }\n            return path;\n        };\n        return Search;\n    })();\n    Gridy.Search = Search;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"ITile.ts\" />\n/// <reference path=\"Integer2.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var TriangularTile = (function (_super) {\n        __extends(TriangularTile, _super);\n        function TriangularTile(x, y, s) {\n            if (x === void 0) { x = 0; }\n            if (y === void 0) { y = 0; }\n            if (s === void 0) { s = false; }\n            _super.call(this, x, y);\n            this.s = s;\n        }\n        TriangularTile.prototype.v = function () {\n            return [this.x, this.y, this.s];\n        };\n        TriangularTile.prototype.toString = function () {\n            return this.v().join(',');\n        };\n        TriangularTile.prototype.shift = function () {\n            return TriangularTile.directions[0];\n        };\n        TriangularTile.prototype.directions = function () {\n            return TriangularTile.directions;\n        };\n        TriangularTile.prototype.add = function (a) {\n            var r = _super.prototype.add.call(this, a);\n            return new TriangularTile(r.x, r.y);\n        };\n        TriangularTile.prototype.scale = function (a) {\n            var r = _super.prototype.scale.call(this, a);\n            return new TriangularTile(r.x, r.y);\n        };\n        TriangularTile.prototype.neighbors = function () {\n            var results = [];\n            for (var dir = 0; dir < 3; dir++) {\n                results.push(this.add(TriangularTile.directions[dir]));\n            }\n            return results;\n        };\n        TriangularTile.directions = [\n            new TriangularTile(0, 0, true),\n            new TriangularTile(-1, 0, false),\n            new TriangularTile(0, -1, false)\n        ];\n        return TriangularTile;\n    })(Gridy.Integer2);\n    Gridy.TriangularTile = TriangularTile;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"IGrid.ts\" />\n/// <reference path=\"TriangularTile.ts\" />\n/// <reference path=\"Bounds.ts\" />\n/// <reference path=\"GridShape.ts\" />\nvar Gridy;\n(function (Gridy) {\n    'use strict';\n    var TriangularGrid = (function () {\n        function TriangularGrid(scale, orientation, shape, x, y) {\n            if (y === void 0) { y = null; }\n            this.angle = -60;\n            this.tileTypes = 2;\n            this.scale = scale;\n            this.radius = Math.sqrt(3) / 6 * scale;\n            this.orientation = orientation;\n            this.x = x;\n            this.y = y;\n            if (shape === 4 /* Rhombus */) {\n                this.tiles = this.rhombus();\n                this.orientation = false;\n            }\n            else if (shape === 2 /* Hexagonal */) {\n                this.tiles = this.hexagonalShape(x);\n                this.orientation = false;\n            }\n            else {\n                this.tiles = this.triangle();\n                this.orientation = false;\n            }\n            this.toPoint = function (tile) {\n                return new Gridy.Position(tile.x * 2 + (tile.s ? 1 : 0), tile.y);\n            };\n        }\n        TriangularGrid.prototype.bounds = function () {\n            return Gridy.Bounds.bounds(this);\n        };\n        TriangularGrid.prototype.center = function (tile) {\n            return new Gridy.Float2((tile.x * 2 + (tile.s ? 1 : 0) + tile.y) * this.scale / 2, this.scale * (tile.y * (Math.sqrt(3) / 2) + (tile.s ? 0 : -(Math.sqrt(3) / 6))));\n        };\n        TriangularGrid.prototype.vertices = function (orientation, scale, tileType) {\n            if (tileType === void 0) { tileType = 0; }\n            if (tileType === 0) {\n                return [\n                    new Gridy.Float2(0, -this.scale * Math.sqrt(3) / 3),\n                    new Gridy.Float2(-this.scale / 2, this.scale * Math.sqrt(3) / 6),\n                    new Gridy.Float2(this.scale / 2, this.scale * Math.sqrt(3) / 6)\n                ];\n            }\n            else {\n                return [\n                    new Gridy.Float2(0, this.scale * (Math.sqrt(3) / 6 + (Math.sqrt(3) / 6))),\n                    new Gridy.Float2(-this.scale / 2, -this.scale * (Math.sqrt(3) / 3 - (Math.sqrt(3) / 6))),\n                    new Gridy.Float2(this.scale / 2, -this.scale * (Math.sqrt(3) / 3 - (Math.sqrt(3) / 6)))\n                ];\n            }\n        };\n        TriangularGrid.prototype.position = function (p) {\n            return new Gridy.TriangularTile(Math.round(p.x), Math.round(p.y), false);\n        };\n        TriangularGrid.prototype.getTileType = function (tile) {\n            return tile.s ? 0 : 1;\n        };\n        TriangularGrid.prototype.rhombus = function () {\n            var results = [];\n            for (var px = 0; px < this.x; px++) {\n                for (var py = 0; py < this.y; py++) {\n                    results.push(new Gridy.TriangularTile(px, py, false));\n                    results.push(new Gridy.TriangularTile(px, py, true));\n                }\n            }\n            return results;\n        };\n        TriangularGrid.prototype.triangle = function () {\n            var results = [];\n            for (var py = 0; py < this.x; py++) {\n                for (var px = 0; px < (this.x - py); px++) {\n                    results.push(new Gridy.TriangularTile(px, py, false));\n                    if (px < (this.x - py - 1)) {\n                        results.push(new Gridy.TriangularTile(px, py, true));\n                    }\n                }\n            }\n            return results;\n        };\n        TriangularGrid.prototype.hexagonalShape = function (size) {\n            var results = [];\n            for (var x = -size; x < size; x++) {\n                for (var y = -size; y < size; y++) {\n                    if (Math.abs(-x - y) <= size && (x + y) < size) {\n                        results.push(new Gridy.TriangularTile(x, y, false));\n                    }\n                    if ((Math.abs(-x - y) - 1) <= size && (x + y + 1) < size) {\n                        results.push(new Gridy.TriangularTile(x, y, true));\n                    }\n                }\n            }\n            return results;\n        };\n        return TriangularGrid;\n    })();\n    Gridy.TriangularGrid = TriangularGrid;\n})(Gridy || (Gridy = {}));\n/// <reference path=\"../../typings/node/node.d.ts\" />\nmodule.exports = Gridy;\n\n},{}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}